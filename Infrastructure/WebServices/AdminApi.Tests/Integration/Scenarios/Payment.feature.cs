// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AFT.RegoV2.AdminApi.Tests.Integration.Scenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Payment")]
    [NUnit.Framework.CategoryAttribute("Integration")]
    public partial class PaymentFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Payment.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Payment", "  As a user I can manage Payment related functionality", ProgrammingLanguage.CSharp, new string[] {
                        "Integration"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not execute permission protected payment methods")]
        public virtual void CanNotExecutePermissionProtectedPaymentMethods()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not execute permission protected payment methods", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("I am logged in with insufficientPermissions for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
    testRunner.Then("I can not execute protected payment methods with insufficient permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not execute payment methods using GET")]
        public virtual void CanNotExecutePaymentMethodsUsingGET()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not execute payment methods using GET", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
    testRunner.Then("I am not allowed to execute payment methods using GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not execute payment methods with invalid token")]
        public virtual void CanNotExecutePaymentMethodsWithInvalidToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not execute payment methods with invalid token", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
    testRunner.Given("I am not logged in and I do not have valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
    testRunner.Then("I am unauthorized to execute payment methods with invalid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can add new PaymentGatewaySettings")]
        public virtual void CanAddNewPaymentGatewaySettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can add new PaymentGatewaySettings", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
    testRunner.Then("New PaymentGatewaySettings is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not add PaymentGatewaySettings with invalid brand")]
        public virtual void CanNotAddPaymentGatewaySettingsWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not add PaymentGatewaySettings with invalid brand", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
    testRunner.Then("I am forbidden to add PaymentGatewaySettings with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not add PaymentGetewaySettings with existed onlinePaymentMethodName")]
        public virtual void CanNotAddPaymentGetewaySettingsWithExistedOnlinePaymentMethodName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not add PaymentGetewaySettings with existed onlinePaymentMethodName", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
      testRunner.Then("New PaymentGatewaySettings is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
      testRunner.When("Add PaymentGatewaySettings with existed onlinePaymentMethodName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
      testRunner.Then("The PaymentGatewaySettings can not be saved due to OnlinePaymentMethodNameAlready" +
                    "Exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not add PaymentGetewaySettings with the same settings")]
        public virtual void CanNotAddPaymentGetewaySettingsWithTheSameSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not add PaymentGetewaySettings with the same settings", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
      testRunner.Then("New PaymentGatewaySettings is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
      testRunner.When("Add PaymentGatewaySettings with the same settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
      testRunner.Then("The PaymentGatewaySettings can not be saved due to PaymentGatewaySettingAlreadyEx" +
                    "ists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can edit PaymentGatewaySettings")]
        public virtual void CanEditPaymentGatewaySettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can edit PaymentGatewaySettings", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
    testRunner.When("New deactivated PaymentGatewaySettings is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
    testRunner.Then("PaymentGatewaySettings data is successfully edited", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not edit PaymentGatewaySettings with invalid brand")]
        public virtual void CanNotEditPaymentGatewaySettingsWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not edit PaymentGatewaySettings with invalid brand", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
    testRunner.When("New deactivated PaymentGatewaySettings is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
    testRunner.Then("I am forbidden to edit PaymentGatewaySettings with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not edit PaymentGetewaySettings with wrong Id")]
        public virtual void CanNotEditPaymentGetewaySettingsWithWrongId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not edit PaymentGetewaySettings with wrong Id", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
      testRunner.Then("New PaymentGatewaySettings is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 56
      testRunner.When("Edit the PaymentGatewaySettings with wrong id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
      testRunner.Then("The PaymentGatewaySettings can not be saved due to NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can activate PaymentGatewaySettings")]
        public virtual void CanActivatePaymentGatewaySettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can activate PaymentGatewaySettings", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
    testRunner.When("New deactivated PaymentGatewaySettings is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
    testRunner.Then("PaymentGatewaySettings is successfully activated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not activate PaymentGatewaySettings with invalid brand")]
        public virtual void CanNotActivatePaymentGatewaySettingsWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not activate PaymentGatewaySettings with invalid brand", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
    testRunner.When("New deactivated PaymentGatewaySettings is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
    testRunner.Given("New user with Activate permission in PaymentGatewaySettings module login for paym" +
                    "ent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
    testRunner.Then("I am forbidden to activate PaymentGatewaySettings with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not activate PaymentGetewaySettings with wrong Id")]
        public virtual void CanNotActivatePaymentGetewaySettingsWithWrongId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not activate PaymentGetewaySettings with wrong Id", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 72
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
      testRunner.Then("New PaymentGatewaySettings is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
      testRunner.When("Activate the PaymentGatewaySettings with wrong id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
      testRunner.Then("The PaymentGatewaySettings can not be activated due to NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can deactivate PaymentGatewaySettings")]
        public virtual void CanDeactivatePaymentGatewaySettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can deactivate PaymentGatewaySettings", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
    testRunner.When("New activated PaymentGatewaySettings is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
    testRunner.Then("PaymentGatewaySettings is successfully deactivated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not deactivate PaymentGatewaySettings with invalid brand")]
        public virtual void CanNotDeactivatePaymentGatewaySettingsWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not deactivate PaymentGatewaySettings with invalid brand", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
    testRunner.When("New activated PaymentGatewaySettings is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
    testRunner.Given("New user with Deactivate permission in PaymentGatewaySettings module login for pa" +
                    "yment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
    testRunner.Then("I am forbidden to deactivate PaymentGatewaySettings with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not deactivate PaymentGetewaySettings with wrong Id")]
        public virtual void CanNotDeactivatePaymentGetewaySettingsWithWrongId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not deactivate PaymentGetewaySettings with wrong Id", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
      testRunner.Then("New PaymentGatewaySettings is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
      testRunner.When("Deactivate the PaymentGatewaySettings with wrong id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
      testRunner.Then("The PaymentGatewaySettings can not be deactivated due to NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can Get PaymentGatewaySettings")]
        public virtual void CanGetPaymentGatewaySettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can Get PaymentGatewaySettings", ((string[])(null)));
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
    testRunner.Then("New PaymentGatewaySettings is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
    testRunner.Then("The PaymentGatewaySettings is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get PaymentGateways")]
        public virtual void CanGetPaymentGateways()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get PaymentGateways", ((string[])(null)));
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
    testRunner.Then("The PaymentGateways is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get PaymentGateways with invalid brand")]
        public virtual void CanNotGetPaymentGatewaysWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get PaymentGateways with invalid brand", ((string[])(null)));
#line 106
this.ScenarioSetup(scenarioInfo);
#line 107
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
    testRunner.When("New deactivated PaymentGatewaySettings is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
    testRunner.Given("New user with View permission in PaymentGatewaySettings module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
    testRunner.Then("I am forbidden to get PaymentGateways with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can Get OnlineDeposit")]
        public virtual void CanGetOnlineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can Get OnlineDeposit", ((string[])(null)));
#line 115
this.ScenarioSetup(scenarioInfo);
#line 116
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 117
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
    testRunner.And("New OnlineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
    testRunner.Then("The OnlineDeposit is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get OnlineDeposit with invalid brand")]
        public virtual void CanNotGetOnlineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get OnlineDeposit with invalid brand", ((string[])(null)));
#line 121
 this.ScenarioSetup(scenarioInfo);
#line 122
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 123
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
    testRunner.And("New OnlineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
    testRunner.Given("New user with Verify permission in DepositVerification module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
    testRunner.Then("I am forbidden to get OnlineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can verify OnlineDeposit")]
        public virtual void CanVerifyOnlineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can verify OnlineDeposit", ((string[])(null)));
#line 129
this.ScenarioSetup(scenarioInfo);
#line 130
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 131
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
    testRunner.And("New OnlineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
    testRunner.Then("OnlineDeposit is successfully verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not verify OnlineDeposit with invalid brand")]
        public virtual void CanNotVerifyOnlineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not verify OnlineDeposit with invalid brand", ((string[])(null)));
#line 135
this.ScenarioSetup(scenarioInfo);
#line 136
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 137
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
    testRunner.And("New OnlineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
    testRunner.Given("New user with Verify permission in DepositVerification module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 140
    testRunner.Then("I am forbidden to verify OnlineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can reject OnlineDeposit")]
        public virtual void CanRejectOnlineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can reject OnlineDeposit", ((string[])(null)));
#line 143
this.ScenarioSetup(scenarioInfo);
#line 144
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 145
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 146
    testRunner.And("New OnlineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
    testRunner.Then("OnlineDeposit is successfully rejected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not reject OnlineDeposit with invalid brand")]
        public virtual void CanNotRejectOnlineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not reject OnlineDeposit with invalid brand", ((string[])(null)));
#line 149
this.ScenarioSetup(scenarioInfo);
#line 150
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
    testRunner.And("New OnlineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
    testRunner.Given("New user with Reject permission in DepositVerification module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 154
    testRunner.Then("I am forbidden to reject OnlineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can approve OnlineDeposit")]
        public virtual void CanApproveOnlineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can approve OnlineDeposit", ((string[])(null)));
#line 157
this.ScenarioSetup(scenarioInfo);
#line 158
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 159
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 160
    testRunner.And("New OnlineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
    testRunner.And("OnlineDeposit is verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
    testRunner.Then("OnlineDeposit is successfully approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not approve OnlineDeposit with invalid brand")]
        public virtual void CanNotApproveOnlineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not approve OnlineDeposit with invalid brand", ((string[])(null)));
#line 164
this.ScenarioSetup(scenarioInfo);
#line 165
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 166
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
    testRunner.And("New OnlineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
    testRunner.Given("New user with Approve permission in DepositApproval module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 169
    testRunner.Then("I am forbidden to approve OnlineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can add new Bank")]
        public virtual void CanAddNewBank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can add new Bank", ((string[])(null)));
#line 175
this.ScenarioSetup(scenarioInfo);
#line 176
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
    testRunner.Then("New Bank is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not add Bank with invalid brand")]
        public virtual void CanNotAddBankWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not add Bank with invalid brand", ((string[])(null)));
#line 179
this.ScenarioSetup(scenarioInfo);
#line 180
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 181
    testRunner.Then("I am forbidden to add Bank with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can edit Bank")]
        public virtual void CanEditBank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can edit Bank", ((string[])(null)));
#line 184
this.ScenarioSetup(scenarioInfo);
#line 185
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 186
    testRunner.When("New Bank is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
    testRunner.Then("Bank data is successfully edited", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not edit Bank with invalid brand")]
        public virtual void CanNotEditBankWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not edit Bank with invalid brand", ((string[])(null)));
#line 189
this.ScenarioSetup(scenarioInfo);
#line 190
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 191
    testRunner.When("New Bank is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 192
    testRunner.Then("I am forbidden to edit Bank with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can Get Bank")]
        public virtual void CanGetBank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can Get Bank", ((string[])(null)));
#line 195
this.ScenarioSetup(scenarioInfo);
#line 196
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 197
    testRunner.When("New Bank is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
    testRunner.Then("The Bank is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get Bank with invalid brand")]
        public virtual void CanNotGetBankWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get Bank with invalid brand", ((string[])(null)));
#line 200
 this.ScenarioSetup(scenarioInfo);
#line 201
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 202
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 203
     testRunner.When("New Bank is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 204
    testRunner.Given("New user with Verify permission in DepositVerification module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 205
    testRunner.Then("I am forbidden to get Bank with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can add new BankAccount")]
        public virtual void CanAddNewBankAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can add new BankAccount", ((string[])(null)));
#line 211
this.ScenarioSetup(scenarioInfo);
#line 212
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 213
    testRunner.Then("New BankAccount is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not add BankAccount with invalid brand")]
        public virtual void CanNotAddBankAccountWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not add BankAccount with invalid brand", ((string[])(null)));
#line 215
this.ScenarioSetup(scenarioInfo);
#line 216
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 217
    testRunner.Then("I am forbidden to add BankAccount with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can edit BankAccount")]
        public virtual void CanEditBankAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can edit BankAccount", ((string[])(null)));
#line 220
this.ScenarioSetup(scenarioInfo);
#line 221
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 222
    testRunner.When("New deactivated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
    testRunner.Then("BankAccount data is successfully edited", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not edit BankAccount with invalid brand")]
        public virtual void CanNotEditBankAccountWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not edit BankAccount with invalid brand", ((string[])(null)));
#line 225
this.ScenarioSetup(scenarioInfo);
#line 226
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 227
    testRunner.When("New deactivated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
    testRunner.Then("I am forbidden to edit BankAccount with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can Get BankAccount")]
        public virtual void CanGetBankAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can Get BankAccount", ((string[])(null)));
#line 231
this.ScenarioSetup(scenarioInfo);
#line 232
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
    testRunner.When("New deactivated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 234
    testRunner.Then("The BankAccount is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get BankAccount with invalid brand")]
        public virtual void CanNotGetBankAccountWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get BankAccount with invalid brand", ((string[])(null)));
#line 236
 this.ScenarioSetup(scenarioInfo);
#line 237
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 238
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 239
     testRunner.When("New deactivated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
    testRunner.Given("New user with View permission in BankAccounts module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 241
    testRunner.Then("I am forbidden to get BankAccount with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can activate BankAccount")]
        public virtual void CanActivateBankAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can activate BankAccount", ((string[])(null)));
#line 244
this.ScenarioSetup(scenarioInfo);
#line 245
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 246
    testRunner.When("New deactivated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 247
    testRunner.Then("BankAccount is successfully activated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not activate BankAccount with invalid brand")]
        public virtual void CanNotActivateBankAccountWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not activate BankAccount with invalid brand", ((string[])(null)));
#line 249
this.ScenarioSetup(scenarioInfo);
#line 250
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 251
    testRunner.When("New deactivated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
    testRunner.Given("New user with Deactivate permission in BankAccounts module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
    testRunner.Then("I am forbidden to activate BankAccount with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can deactivate BankAccount")]
        public virtual void CanDeactivateBankAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can deactivate BankAccount", ((string[])(null)));
#line 256
this.ScenarioSetup(scenarioInfo);
#line 257
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 258
    testRunner.When("New activated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 259
    testRunner.Then("BankAccount is successfully deactivated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not deactivate BankAccount with invalid brand")]
        public virtual void CanNotDeactivateBankAccountWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not deactivate BankAccount with invalid brand", ((string[])(null)));
#line 261
this.ScenarioSetup(scenarioInfo);
#line 262
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 263
    testRunner.When("New activated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 264
    testRunner.Given("New user with Deactivate permission in BankAccounts module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 265
    testRunner.Then("I am forbidden to deactivate BankAccount with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can verfiy PlayerBankAccount")]
        public virtual void CanVerfiyPlayerBankAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can verfiy PlayerBankAccount", ((string[])(null)));
#line 270
this.ScenarioSetup(scenarioInfo);
#line 271
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 272
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 273
    testRunner.And("New pending PlayerBankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
    testRunner.Then("PlayerBankAccount is successfully verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not verfiy PlayerBankAccount with invalid brand")]
        public virtual void CanNotVerfiyPlayerBankAccountWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not verfiy PlayerBankAccount with invalid brand", ((string[])(null)));
#line 276
this.ScenarioSetup(scenarioInfo);
#line 277
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 278
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
    testRunner.And("New pending PlayerBankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
    testRunner.Given("New user with Verify permission in PlayerBankAccount module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 281
    testRunner.Then("I am forbidden to verify PlayerBankAccount with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can reject PlayerBankAccount")]
        public virtual void CanRejectPlayerBankAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can reject PlayerBankAccount", ((string[])(null)));
#line 284
this.ScenarioSetup(scenarioInfo);
#line 285
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 286
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 287
    testRunner.And("New pending PlayerBankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
    testRunner.Then("PlayerBankAccount is successfully rejected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not reject PlayerBankAccount with invalid brand")]
        public virtual void CanNotRejectPlayerBankAccountWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not reject PlayerBankAccount with invalid brand", ((string[])(null)));
#line 290
this.ScenarioSetup(scenarioInfo);
#line 291
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 292
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 293
    testRunner.And("New pending PlayerBankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
    testRunner.Given("New user with Reject permission in PlayerBankAccount module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 295
    testRunner.Then("I am forbidden to reject PlayerBankAccount with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can Get OfflineDeposit")]
        public virtual void CanGetOfflineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can Get OfflineDeposit", ((string[])(null)));
#line 301
this.ScenarioSetup(scenarioInfo);
#line 302
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 303
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 304
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
    testRunner.Then("The OfflineDeposit is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create OfflineDeposit")]
        public virtual void CanCreateOfflineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create OfflineDeposit", ((string[])(null)));
#line 308
this.ScenarioSetup(scenarioInfo);
#line 309
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 310
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
    testRunner.And("New activated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
    testRunner.Then("OfflineDeposit is successfully created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not create OfflineDeposit with invalid brand")]
        public virtual void CanNotCreateOfflineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not create OfflineDeposit with invalid brand", ((string[])(null)));
#line 314
this.ScenarioSetup(scenarioInfo);
#line 315
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 316
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 317
    testRunner.And("New activated BankAccount is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 318
    testRunner.Given("New user with Create permission in OfflineDepositRequests module login for paymen" +
                    "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 319
    testRunner.Then("I am forbidden to create OfflineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can confirm OfflineDeposit")]
        public virtual void CanConfirmOfflineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can confirm OfflineDeposit", ((string[])(null)));
#line 322
this.ScenarioSetup(scenarioInfo);
#line 323
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 324
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 325
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
    testRunner.Then("OfflineDeposit is successfully confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not confirm OfflineDeposit with invalid brand")]
        public virtual void CanNotConfirmOfflineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not confirm OfflineDeposit with invalid brand", ((string[])(null)));
#line 328
this.ScenarioSetup(scenarioInfo);
#line 329
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 330
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 331
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
    testRunner.Given("New user with Confirm permission in OfflineDepositConfirmation module login for p" +
                    "ayment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 333
    testRunner.Then("I am forbidden to confirm OfflineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can verfiy OfflineDeposit")]
        public virtual void CanVerfiyOfflineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can verfiy OfflineDeposit", ((string[])(null)));
#line 336
this.ScenarioSetup(scenarioInfo);
#line 337
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 338
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 339
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 340
    testRunner.And("OfflineDeposit is confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 341
    testRunner.Then("OfflineDeposit is successfully verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not verfiy OfflineDeposit with invalid brand")]
        public virtual void CanNotVerfiyOfflineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not verfiy OfflineDeposit with invalid brand", ((string[])(null)));
#line 343
this.ScenarioSetup(scenarioInfo);
#line 344
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 345
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 346
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
    testRunner.And("OfflineDeposit is confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
    testRunner.Given("New user with Verify permission in DepositVerification module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 349
    testRunner.Then("I am forbidden to verify OfflineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can unverifiy OfflineDeposit")]
        public virtual void CanUnverifiyOfflineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can unverifiy OfflineDeposit", ((string[])(null)));
#line 352
this.ScenarioSetup(scenarioInfo);
#line 353
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 354
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 355
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 356
    testRunner.And("OfflineDeposit is confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 357
    testRunner.Then("OfflineDeposit is successfully unverified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not unverifiy OfflineDeposit with invalid brand")]
        public virtual void CanNotUnverifiyOfflineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not unverifiy OfflineDeposit with invalid brand", ((string[])(null)));
#line 359
this.ScenarioSetup(scenarioInfo);
#line 360
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 361
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 362
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
    testRunner.And("OfflineDeposit is confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
    testRunner.Given("New user with Unverify permission in DepositVerification module login for payment" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 365
    testRunner.Then("I am forbidden to unverify OfflineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can approve OfflineDeposit")]
        public virtual void CanApproveOfflineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can approve OfflineDeposit", ((string[])(null)));
#line 368
this.ScenarioSetup(scenarioInfo);
#line 369
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 370
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 371
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 372
    testRunner.And("OfflineDeposit is confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 373
    testRunner.And("OfflineDeposit is verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 374
    testRunner.Then("OfflineDeposit is successfully approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not approve OfflineDeposit with invalid brand")]
        public virtual void CanNotApproveOfflineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not approve OfflineDeposit with invalid brand", ((string[])(null)));
#line 376
this.ScenarioSetup(scenarioInfo);
#line 377
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 378
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 379
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
    testRunner.And("OfflineDeposit is confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
    testRunner.And("OfflineDeposit is verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
    testRunner.Given("New user with Approve permission in DepositApproval module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 383
    testRunner.Then("I am forbidden to approve OfflineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can reject OfflineDeposit")]
        public virtual void CanRejectOfflineDeposit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can reject OfflineDeposit", ((string[])(null)));
#line 386
this.ScenarioSetup(scenarioInfo);
#line 387
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 388
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 389
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 390
    testRunner.And("OfflineDeposit is confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 391
    testRunner.And("OfflineDeposit is verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 392
    testRunner.Then("OfflineDeposit is successfully rejected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not reject OfflineDeposit with invalid brand")]
        public virtual void CanNotRejectOfflineDepositWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not reject OfflineDeposit with invalid brand", ((string[])(null)));
#line 394
this.ScenarioSetup(scenarioInfo);
#line 395
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 396
    testRunner.When("New player is created with default brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 397
    testRunner.And("New OfflineDeposit is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 398
    testRunner.And("OfflineDeposit is confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 399
    testRunner.And("OfflineDeposit is verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
    testRunner.Given("New user with Reject permission in DepositApproval module login for payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 401
    testRunner.Then("I am forbidden to reject OfflineDeposit with invalid brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
