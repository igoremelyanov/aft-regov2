// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AFT.RegoV2.AdminApi.Tests.Integration.Scenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Brand")]
    [NUnit.Framework.CategoryAttribute("Integration")]
    public partial class BrandFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Brand.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Brand", "  As a user, I can add, view, edit, activate, deactivate brand and countries assi" +
                    "gned to it", ProgrammingLanguage.CSharp, new string[] {
                        "Integration"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not execute permission protected brand methods")]
        public virtual void CanNotExecutePermissionProtectedBrandMethods()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not execute permission protected brand methods", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
    testRunner.Then("I am forbidden to execute permission protected brand methods with insufficient pe" +
                    "rmissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not execute brand methods with invalid token")]
        public virtual void CanNotExecuteBrandMethodsWithInvalidToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not execute brand methods with invalid token", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
    testRunner.Given("I am not logged in and I do not have valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
    testRunner.Then("I am unauthorized to execute brand methods with invalid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not not execute brand methods using GET")]
        public virtual void CanNotNotExecuteBrandMethodsUsingGET()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not not execute brand methods using GET", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
    testRunner.Then("I am not allowed to execute brand methods using GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not not execute brand methods using POST")]
        public virtual void CanNotNotExecuteBrandMethodsUsingPOST()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not not execute brand methods using POST", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
    testRunner.Then("I am not allowed to execute brand methods using POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get user brands")]
        public virtual void CanGetUserBrands()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get user brands", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
    testRunner.Then("Available brands are visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get brand add data")]
        public virtual void CanGetBrandAddData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get brand add data", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
    testRunner.Then("Required data to add new brand is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get brand edit data")]
        public virtual void CanGetBrandEditData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get brand edit data", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
    testRunner.Then("Required data to edit that brand is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get brand edit data with invalid brand")]
        public virtual void CanNotGetBrandEditDataWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get brand edit data with invalid brand", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
    testRunner.And("New user with Update permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
    testRunner.Then("I am forbidden to get brand edit data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get brand view data")]
        public virtual void CanGetBrandViewData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get brand view data", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
    testRunner.Then("Required brand data is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get brand view data with invalid brand")]
        public virtual void CanNotGetBrandViewDataWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get brand view data with invalid brand", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
    testRunner.And("New user with View permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
    testRunner.Then("I am forbidden to get brand view data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can add new brand")]
        public virtual void CanAddNewBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can add new brand", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
    testRunner.Then("New brand is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can edit brand data")]
        public virtual void CanEditBrandData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can edit brand data", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
    testRunner.When("New deactivated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
    testRunner.Then("Brand data is successfully edited", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not edit brand data with invalid brand")]
        public virtual void CanNotEditBrandDataWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not edit brand data with invalid brand", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
    testRunner.And("New user with Update permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
    testRunner.Then("I am forbidden to edit brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get brand countries")]
        public virtual void CanGetBrandCountries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get brand countries", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 82
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
    testRunner.Then("Brand countries are visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get brand countries with invalid brand")]
        public virtual void CanNotGetBrandCountriesWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get brand countries with invalid brand", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
    testRunner.And("New user with View permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
    testRunner.Then("I am forbidden to get brand countries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can activate brand")]
        public virtual void CanActivateBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can activate brand", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
    testRunner.When("New deactivated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
    testRunner.Then("Brand is successfully activated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not activate brand with invalid brand")]
        public virtual void CanNotActivateBrandWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not activate brand with invalid brand", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line 98
    testRunner.Given("New deactivated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
    testRunner.And("New user with Activate permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
    testRunner.Then("I am forbidden to activate brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can deactivate brand")]
        public virtual void CanDeactivateBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can deactivate brand", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
    testRunner.Then("Brand is successfully deactivated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not deactivate brand with invalid brand")]
        public virtual void CanNotDeactivateBrandWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not deactivate brand with invalid brand", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
    testRunner.And("New user with Deactivate permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
    testRunner.Then("I am forbidden to deactivate brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can get brands list")]
        public virtual void CanGetBrandsList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can get brands list", ((string[])(null)));
#line 116
this.ScenarioSetup(scenarioInfo);
#line 117
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
    testRunner.Then("Brands are visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brands countries assign data")]
        public virtual void GetBrandsCountriesAssignData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brands countries assign data", ((string[])(null)));
#line 126
this.ScenarioSetup(scenarioInfo);
#line 127
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 129
    testRunner.Then("Brand country assign data is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get brands countries assign data with invalid brand")]
        public virtual void CanNotGetBrandsCountriesAssignDataWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get brands countries assign data with invalid brand", ((string[])(null)));
#line 131
this.ScenarioSetup(scenarioInfo);
#line 132
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 133
    testRunner.And("New user with View permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
    testRunner.Then("I am forbidden get brands countries assign data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign country to the brand")]
        public virtual void AssignCountryToTheBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign country to the brand", ((string[])(null)));
#line 138
this.ScenarioSetup(scenarioInfo);
#line 139
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 140
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
        testRunner.And("New country is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
    testRunner.Then("Brand country is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not assign country to the brand with invalid brand")]
        public virtual void CanNotAssignCountryToTheBrandWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not assign country to the brand with invalid brand", ((string[])(null)));
#line 144
this.ScenarioSetup(scenarioInfo);
#line 145
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 146
    testRunner.And("New user with Create permission in SupportedCountries module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
    testRunner.When("New country is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
    testRunner.Then("I am forbidden to assign country to the brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brands cultures assign data")]
        public virtual void GetBrandsCulturesAssignData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brands cultures assign data", ((string[])(null)));
#line 156
this.ScenarioSetup(scenarioInfo);
#line 157
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 158
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
    testRunner.Then("Brand culture assign data is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get brands cultures assign data with invalid brand")]
        public virtual void CanNotGetBrandsCulturesAssignDataWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get brands cultures assign data with invalid brand", ((string[])(null)));
#line 161
this.ScenarioSetup(scenarioInfo);
#line 162
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
    testRunner.And("New user with View permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
    testRunner.Then("I am forbidden get brands cultures assign data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign culture to the brand")]
        public virtual void AssignCultureToTheBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign culture to the brand", ((string[])(null)));
#line 168
this.ScenarioSetup(scenarioInfo);
#line 169
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 170
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
        testRunner.And("New culture is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
    testRunner.Then("Brand culture is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not assign culture to the brand with invalid brand")]
        public virtual void CanNotAssignCultureToTheBrandWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not assign culture to the brand with invalid brand", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line 175
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 176
    testRunner.And("New user with Create permission in SupportedLanguages module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
    testRunner.When("New culture is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 179
    testRunner.Then("I am forbidden to assign culture to the brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brand currencies")]
        public virtual void GetBrandCurrencies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brand currencies", ((string[])(null)));
#line 186
this.ScenarioSetup(scenarioInfo);
#line 187
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 188
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
    testRunner.Then("Brand currencies are visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get brand currencies with invalid brand")]
        public virtual void CanNotGetBrandCurrenciesWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get brand currencies with invalid brand", ((string[])(null)));
#line 191
this.ScenarioSetup(scenarioInfo);
#line 192
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 193
    testRunner.And("New user with View permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
    testRunner.Then("I am forbidden get brand currencies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brand currencies with names")]
        public virtual void GetBrandCurrenciesWithNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brand currencies with names", ((string[])(null)));
#line 198
this.ScenarioSetup(scenarioInfo);
#line 199
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 200
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
    testRunner.Then("Brand currencies with names are visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get brand currencies with names with invalid brand")]
        public virtual void CanNotGetBrandCurrenciesWithNamesWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get brand currencies with names with invalid brand", ((string[])(null)));
#line 203
this.ScenarioSetup(scenarioInfo);
#line 204
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 205
    testRunner.And("New user with View permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
    testRunner.Then("I am forbidden get brand currencies with names", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brand currency assign data")]
        public virtual void GetBrandCurrencyAssignData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brand currency assign data", ((string[])(null)));
#line 210
this.ScenarioSetup(scenarioInfo);
#line 211
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 212
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 213
    testRunner.Then("Brand currency assign data is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not get brand currency assign data with invalid brand")]
        public virtual void CanNotGetBrandCurrencyAssignDataWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not get brand currency assign data with invalid brand", ((string[])(null)));
#line 215
this.ScenarioSetup(scenarioInfo);
#line 216
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 217
    testRunner.And("New user with View permission in BrandManager module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
    testRunner.Then("I am forbidden get brand currency assign data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign currency to the brand")]
        public virtual void AssignCurrencyToTheBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign currency to the brand", ((string[])(null)));
#line 222
this.ScenarioSetup(scenarioInfo);
#line 223
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 224
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 225
        testRunner.And("New currency is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
    testRunner.Then("Brand currency is successfully added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not assign currency to the brand with invalid brand")]
        public virtual void CanNotAssignCurrencyToTheBrandWithInvalidBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not assign currency to the brand with invalid brand", ((string[])(null)));
#line 228
this.ScenarioSetup(scenarioInfo);
#line 229
    testRunner.Given("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 230
    testRunner.And("New user with Create permission in SupportedCurrencies module is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
    testRunner.And("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
    testRunner.Then("I am forbidden to assign currency to the brand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brand product assign data")]
        public virtual void GetBrandProductAssignData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brand product assign data", ((string[])(null)));
#line 236
this.ScenarioSetup(scenarioInfo);
#line 237
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 238
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 239
    testRunner.Then("Brand product assign data is visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign product to the brand")]
        public virtual void AssignProductToTheBrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign product to the brand", ((string[])(null)));
#line 241
this.ScenarioSetup(scenarioInfo);
#line 242
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 243
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 244
    testRunner.Then("Brand product is successfully assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brand product bet levels")]
        public virtual void GetBrandProductBetLevels()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brand product bet levels", ((string[])(null)));
#line 246
this.ScenarioSetup(scenarioInfo);
#line 247
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 248
    testRunner.When("New activated brand is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 249
    testRunner.Then("Brand product bet levels are visible to me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new content translation")]
        public virtual void CreateNewContentTranslation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new content translation", ((string[])(null)));
#line 251
this.ScenarioSetup(scenarioInfo);
#line 252
    testRunner.Given("I am logged in and have access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
    testRunner.When("New culture is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 254
    testRunner.Then("New content translation is successfully created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
