// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AFT.RegoV2.GameApi.Tests.Integration.Scenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Core Game Api")]
    [NUnit.Framework.CategoryAttribute("Integration")]
    public partial class CoreGameApiFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CoreGameApi.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Core Game Api", "Calling Core Game API", ProgrammingLanguage.CSharp, new string[] {
                        "Integration"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get and validate authentication token")]
        public virtual void GetAndValidateAuthenticationToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get and validate authentication token", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.When("I call to validate token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
  testRunner.Then("I will receive successful validation result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get playable balance")]
        public virtual void GetPlayableBalance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get playable balance", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
  testRunner.And("the player \"testplayer\" main balance is $11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("the player \"testplayer\" withdraws $11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place bet when playable balance is $0")]
        public virtual void PlaceBetWhenPlayableBalanceIs0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place bet when playable balance is $0", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
  testRunner.And("the player \"testplayer\" main balance is $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When("I bet $5 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
  testRunner.Then("I will get error code \"InsufficientFunds\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.When("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
  testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
  testRunner.And("requested bet will not be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
  testRunner.And("place bet response balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place bet when playable balance is insufficient")]
        public virtual void PlaceBetWhenPlayableBalanceIsInsufficient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place bet when playable balance is insufficient", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
  testRunner.And("the player \"testplayer\" main balance is $1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When("I bet $1500 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
  testRunner.Then("I will get error code \"InsufficientFunds\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.When("the player \"testplayer\" withdraws $1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
  testRunner.And("requested bet will not be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place bet when playable balance is sufficient")]
        public virtual void PlaceBetWhenPlayableBalanceIsSufficient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place bet when playable balance is sufficient", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
  testRunner.And("the player \"testplayer\" main balance is $10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
  testRunner.Then("the player\'s playable balance will be $10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.When("I bet $5 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.When("the player \"testplayer\" withdraws $5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
  testRunner.And("requested bet will be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
  testRunner.And("place bet response balance will be $5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place and win bet")]
        public virtual void PlaceAndWinBet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place and win bet", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
  testRunner.And("the player \"testplayer\" main balance is $20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.When("I bet $15 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.When("I win $25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 65
 testRunner.When("the player \"testplayer\" withdraws $30", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
  testRunner.And("requested bet will be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place and win multiple bets")]
        public virtual void PlaceAndWinMultipleBets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place and win multiple bets", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
  testRunner.And("the player \"testplayer\" main balance is $20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When("I bet $15 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount"});
            table1.AddRow(new string[] {
                        "3.0"});
            table1.AddRow(new string[] {
                        "12.0"});
            table1.AddRow(new string[] {
                        "27.0"});
#line 77
 testRunner.When("I win multiple amounts:", ((string)(null)), table1, "When ");
#line 82
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
  testRunner.And("win bet response balance will be $47", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.When("the player \"testplayer\" withdraws $47", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
  testRunner.And("requested bet will be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place and \"win\" less than what was placed")]
        public virtual void PlaceAndWinLessThanWhatWasPlaced()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place and \"win\" less than what was placed", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
  testRunner.And("the player \"testplayer\" main balance is $20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.When("I bet $15 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
 testRunner.When("I win $5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
 testRunner.When("the player \"testplayer\" withdraws $10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
  testRunner.And("requested bet will be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place and lose bet")]
        public virtual void PlaceAndLoseBet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place and lose bet", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
  testRunner.And("the player \"testplayer\" main balance is $20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.When("I bet $15 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
 testRunner.When("I lose the bet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 112
 testRunner.When("the player \"testplayer\" withdraws $5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
  testRunner.And("requested bet will be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get free bet")]
        public virtual void GetFreeBet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get free bet", ((string[])(null)));
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
  testRunner.And("the player \"testplayer\" main balance is $20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.When("I get free bet for $15 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
 testRunner.When("the player \"testplayer\" withdraws $35", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
  testRunner.And("requested bet will be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settle batch of bets")]
        public virtual void SettleBatchOfBets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settle batch of bets", ((string[])(null)));
#line 128
this.ScenarioSetup(scenarioInfo);
#line 129
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
  testRunner.And("the player \"testplayer\" main balance is $20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount"});
            table2.AddRow(new string[] {
                        "5.0"});
            table2.AddRow(new string[] {
                        "5.0"});
            table2.AddRow(new string[] {
                        "5.0"});
#line 132
 testRunner.When("I place bets for game \"RL-MOCK\" for amount:", ((string)(null)), table2, "When ");
#line 137
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 138
 testRunner.When("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
  testRunner.Then("the player\'s playable balance will be $5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Amount"});
            table3.AddRow(new string[] {
                        "WIN",
                        "400.0"});
            table3.AddRow(new string[] {
                        "LOSE",
                        "0.0"});
            table3.AddRow(new string[] {
                        "WIN",
                        "32.0"});
#line 140
 testRunner.When("I settle the following bets with \"MOCK_CASINO_CLIENT_ID_SECURITY_KEY\":", ((string)(null)), table3, "When ");
#line 146
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 147
 testRunner.When("the player \"testplayer\" withdraws $437", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 151
  testRunner.And("requested bets will be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settle batch of bets for multiple players")]
        public virtual void SettleBatchOfBetsForMultiplePlayers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settle batch of bets for multiple players", ((string[])(null)));
#line 154
this.ScenarioSetup(scenarioInfo);
#line 155
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 156
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
  testRunner.And("the player \"testplayer\" main balance is $20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.When("I call to validate token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
  testRunner.Then("I will receive successful validation result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 160
 testRunner.When("\"testplayer\" bets $5 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 162
 testRunner.When("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
  testRunner.Then("the player\'s playable balance will be $15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 164
 testRunner.Given("I get authentication token for player \"demoplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
  testRunner.And("the player \"demoplayer\" main balance is $70", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.When("I call to validate token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
  testRunner.Then("I will receive successful validation result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 168
 testRunner.When("\"demoplayer\" bets $45 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 170
 testRunner.When("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
  testRunner.Then("the player\'s playable balance will be $25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlayerName",
                        "Type",
                        "Amount"});
            table4.AddRow(new string[] {
                        "testplayer",
                        "WIN",
                        "400.0"});
            table4.AddRow(new string[] {
                        "demoplayer",
                        "WIN",
                        "3.0"});
            table4.AddRow(new string[] {
                        "testplayer",
                        "WIN",
                        "543.0"});
            table4.AddRow(new string[] {
                        "demoplayer",
                        "WIN",
                        "2.0"});
            table4.AddRow(new string[] {
                        "testplayer",
                        "WIN",
                        "234.0"});
            table4.AddRow(new string[] {
                        "demoplayer",
                        "WIN",
                        "7.0"});
            table4.AddRow(new string[] {
                        "testplayer",
                        "WIN",
                        "664.0"});
            table4.AddRow(new string[] {
                        "demoplayer",
                        "WIN",
                        "11.0"});
#line 172
 testRunner.When("I batch settle the following bets with \"MOCK_CASINO_CLIENT_ID_SECURITY_KEY\":", ((string)(null)), table4, "When ");
#line 183
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 184
 testRunner.When("the player \"testplayer\" withdraws $1856", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 185
  testRunner.And("the player \"demoplayer\" withdraws $48", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.Then("the response\'s playable balance for \"testplayer\" will be $1856", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 187
  testRunner.And("the response\'s playable balance for \"demoplayer\" will be $48", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settle batch of bets with invalid security key")]
        public virtual void SettleBatchOfBetsWithInvalidSecurityKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settle batch of bets with invalid security key", ((string[])(null)));
#line 189
this.ScenarioSetup(scenarioInfo);
#line 190
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 191
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
  testRunner.And("the player \"testplayer\" main balance is $20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount"});
            table5.AddRow(new string[] {
                        "5.0"});
            table5.AddRow(new string[] {
                        "5.0"});
            table5.AddRow(new string[] {
                        "5.0"});
#line 193
 testRunner.When("I place bets for game \"RL-MOCK\" for amount:", ((string)(null)), table5, "When ");
#line 198
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.When("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 200
  testRunner.Then("the player\'s playable balance will be $5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Amount"});
            table6.AddRow(new string[] {
                        "WIN",
                        "400.0"});
            table6.AddRow(new string[] {
                        "LOSE",
                        "0.0"});
            table6.AddRow(new string[] {
                        "WIN",
                        "32.0"});
#line 201
 testRunner.When("I settle the following bets with \"INVALID_SECURITY_KEY\":", ((string)(null)), table6, "When ");
#line 207
  testRunner.Then("I will get error code \"InvalidArguments\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 208
 testRunner.When("the player \"testplayer\" withdraws $5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 209
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 211
  testRunner.And("requested bets will be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting bet history")]
        public virtual void GettingBetHistory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting bet history", ((string[])(null)));
#line 214
this.ScenarioSetup(scenarioInfo);
#line 215
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 216
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
  testRunner.And("the player \"testplayer\" main balance is $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.When("I bet $15 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
 testRunner.When("I bet $5 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 221
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
 testRunner.When("I get history for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
  testRunner.Then("I will see the bet IDs in the history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 224
 testRunner.When("the player \"testplayer\" withdraws $80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 225
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cancel transaction of placing bet")]
        public virtual void CancelTransactionOfPlacingBet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel transaction of placing bet", ((string[])(null)));
#line 228
this.ScenarioSetup(scenarioInfo);
#line 229
 testRunner.Given("I get authorization token for game provider \"MOCK_CASINO_CLIENT_ID\" with secret \"" +
                    "MOCK_CLIENT_SECRET\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 230
  testRunner.And("I get authentication token for player \"testplayer\" with password \"123456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
  testRunner.And("the player \"testplayer\" main balance is $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.When("I bet $15 for game \"RL-MOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 233
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 234
 testRunner.When("I cancel the last transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 235
  testRunner.Then("I will get error code \"NoError\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 236
 testRunner.When("the player \"testplayer\" withdraws $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
  testRunner.And("I get balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
 testRunner.Then("the player\'s playable balance will be $0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
