// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["i18next", "security/security", "nav", "payments/player-bank-accounts/result-dialog", "config"], function(i18n, security, nav, dialogSetCurrentBankAccount, config) {
    var BankAccounts;
    return BankAccounts = (function() {
      function BankAccounts() {
        this.setCurrentBankAccount = __bind(this.setCurrentBankAccount, this);
        this.playerId = ko.observable();
        this.bankAccountsSelectedRowId = ko.observable();
        this.bankAccountData = ko.observable();
        this.hasEditBankAccountsPermission = ko.computed(function() {
          return security.isOperationAllowed(security.permissions.update, security.categories.playerBankAccount);
        });
        this.hasAddBankAccountsPermission = ko.computed(function() {
          return security.isOperationAllowed(security.permissions.create, security.categories.playerBankAccount);
        });
        this.canSetCurrentBankAccount = ko.computed((function(_this) {
          return function() {
            var bankAccountId;
            bankAccountId = _this.bankAccountsSelectedRowId();
            if (!bankAccountId) {
              return false;
            }
            if (!_this.bankAccountData()) {
              return false;
            }
            return _this.bankAccountData().IsCurrent !== "Yes";
          };
        })(this));
        this.gridId = null;
      }

      BankAccounts.prototype.activate = function(data) {
        return this.playerId(data.playerId);
      };

      BankAccounts.prototype.attached = function(view) {
        var $grid, self, table;
        self = this;
        $grid = findGrid(view);
        table = $grid.find('.ui-jqgrid-btable');
        self.gridId = table.attr("id");
        return $(view).on("click", ".jqgrow", function() {
          self.bankAccountsSelectedRowId($(this).attr("id"));
          return self.bankAccountData(table.jqGrid('getRowData', self.bankAccountsSelectedRowId()));
        });
      };

      BankAccounts.prototype.openAddBankAccountForm = function(data) {
        return nav.open({
          path: 'payments/player-bank-accounts/edit',
          title: i18n.t("app:banks.newAccount"),
          data: {
            playerInfo: this,
            playerId: data.playerId(),
            naming: {
              gridBodyId: this.gridId
            }
          }
        });
      };

      BankAccounts.prototype.openEditBankAccountForm = function() {
        return nav.open({
          path: "payments/player-bank-accounts/edit",
          title: i18n.t("app:banks.editAccount"),
          data: {
            playerInfo: this,
            id: this.bankAccountsSelectedRowId(),
            naming: {
              gridBodyId: this.gridId
            }
          }
        });
      };

      BankAccounts.prototype.openViewBankAccountForm = function() {
        return nav.open({
          path: "payments/player-bank-accounts/edit",
          title: i18n.t("app:banks.viewAccount"),
          data: {
            playerInfo: this,
            id: this.bankAccountsSelectedRowId(),
            isView: true,
            naming: {
              gridBodyId: this.gridId
            }
          }
        });
      };

      BankAccounts.prototype.setCurrentBankAccount = function() {
        return $.ajax({
          type: "POST",
          url: config.adminApi("PlayerManager/SetCurrentBankAccount"),
          data: ko.toJSON({
            playerBankAccountId: this.bankAccountsSelectedRowId()
          }),
          contentType: 'application/json; charset=utf-8',
          dataType: 'json'
        }).done((function(_this) {
          return function(response) {
            var error, isSuccess, message, messageClass;
            isSuccess = void 0;
            message = void 0;
            messageClass = void 0;
            if (response.result === "success") {
              isSuccess = true;
              message = i18n.t("app:payment.successfulySetCurrentBankAccount");
              messageClass = "alert-success";
            } else {
              isSuccess = false;
              error = JSON.parse(response.fields[0].errors[0]);
              message = i18n.t(error.text);
              messageClass = "alert-danger";
            }
            dialogSetCurrentBankAccount.show(i18n.t("app:payment.settingCurrentBankAccount"), message, messageClass);
            if (isSuccess) {
              $("#" + _this.gridId).trigger("reloadGrid");
              return _this.bankAccountsSelectedRowId(null);
            }
          };
        })(this));
      };

      return BankAccounts;

    })();
  });

}).call(this);
