// Generated by IcedCoffeeScript 108.0.9
(function() {
  define(['i18next', 'shell', 'moment', 'config', 'controls/grid'], function(i18n, shell, moment, config) {
    var TransactionsAdv;
    return TransactionsAdv = (function() {
      function TransactionsAdv() {
        var _ref, _ref1;
        this.shell = shell;
        this.moment = moment;
        this.config = config;
        _ref = ko.observables(), this.playerId = _ref[0], this.currentWallet = _ref[1];
        _ref1 = ko.observableArrays(), this.wallets = _ref1[0], this.walletsName = _ref1[1];
        this.transactionTypeNames = ko.observable({});
      }

      TransactionsAdv.prototype.activate = function(data) {
        this.playerId(data.playerId);
        return $.when.apply($, [
          $.get(this.config.adminApi('PlayerInfo/GetWalletTemplates'), {
            playerId: this.playerId()
          }).done((function(_this) {
            return function(response) {
              var wallet, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = response.length; _i < _len; _i++) {
                wallet = response[_i];
                _results.push(_this.walletsName.push(wallet.name));
              }
              return _results;
            };
          })(this)), $.get(this.config.adminApi('PlayerInfo/GetTransactionTypes')).done((function(_this) {
            return function(response) {
              var item, _i, _len, _ref, _results;
              _ref = response.types;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                _results.push(_this.transactionTypeNames()[item.name] = i18n.t("playerManager.transactions.types." + item.name));
              }
              return _results;
            };
          })(this))
        ]);
      };

      TransactionsAdv.prototype.attached = function(view) {
        var $grid;
        $grid = findGrid(view);
        return $("form", view).submit(function() {
          $grid.trigger("reload");
          return false;
        });
      };

      TransactionsAdv.prototype.typeFormatter = function() {
        return i18n.t("playerManager.transactions.types." + this.Type);
      };

      return TransactionsAdv;

    })();
  });

}).call(this);
