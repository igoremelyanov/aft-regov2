// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var ViewModel, config, confirmation, efu, nav;
    require("controls/grid");
    nav = require("nav");
    confirmation = require("player-manager/info/confirm-dialog/confirm-dialog");
    config = require("config");
    efu = require("EntityFormUtil");
    return ViewModel = (function() {
      function ViewModel() {
        this.colorClass = __bind(this.colorClass, this);
        this.setMetadata = __bind(this.setMetadata, this);
        var fieldsList;
        this.moment = require("moment");
        this.config = require("config");
        this.playerId = ko.observable();
        this.selectedRowId = ko.observable();
        this.metadata = ko.observable([]);
        this.form = new efu.Form(this);
        this.form.makeField("deviceIdExactScore", ko.observable());
        this.form.makeField("firstNameExactScore", ko.observable());
        this.form.makeField("lastNameExactScore", ko.observable());
        this.form.makeField("fullNameExactScore", ko.observable());
        this.form.makeField("usernameExactScore", ko.observable());
        this.form.makeField("addressExactScore", ko.observable());
        this.form.makeField("signUpIpExactScore", ko.observable());
        this.form.makeField("mobilePhoneExactScore", ko.observable());
        this.form.makeField("dateOfBirthExactScore", ko.observable());
        this.form.makeField("emailAddressExactScore", ko.observable());
        this.form.makeField("zipCodeExactScore", ko.observable());
        this.form.makeField("deviceIdFuzzyScore", ko.observable());
        this.form.makeField("firstNameFuzzyScore", ko.observable());
        this.form.makeField("lastNameFuzzyScore", ko.observable());
        this.form.makeField("fullNameFuzzyScore", ko.observable());
        this.form.makeField("usernameFuzzyScore", ko.observable());
        this.form.makeField("addressFuzzyScore", ko.observable());
        this.form.makeField("signUpIpFuzzyScore", ko.observable());
        this.form.makeField("mobilePhoneFuzzyScore", ko.observable());
        this.form.makeField("dateOfBirthFuzzyScore", ko.observable());
        this.form.makeField("emailAddressFuzzyScore", ko.observable());
        this.form.makeField("zipCodeFuzzyScore", ko.observable());
        fieldsList = ["deviceIdExactScore", "firstNameExactScore", "lastNameExactScore", "fullNameExactScore", "usernameExactScore", "addressExactScore", "signUpIpExactScore", "mobilePhoneExactScore", "dateOfBirthExactScore", "emailAddressExactScore", "zipCodeExactScore", "deviceIdFuzzyScore", "firstNameFuzzyScore", "lastNameFuzzyScore", "fullNameFuzzyScore", "usernameFuzzyScore", "addressFuzzyScore", "signUpIpFuzzyScore", "mobilePhoneFuzzyScore", "dateOfBirthFuzzyScore", "emailAddressFuzzyScore", "zipCodeFuzzyScore"];
        efu.publishIds(this, "duplicate-search-", fieldsList);
        efu.addCommonMembers(this);
        this.form.publishIsReadOnly(fieldsList);
        this.getFormData = (function(_this) {
          return function() {
            return ko.toJSON({
              deviceIdExactScore: parseInt(_this.fields.deviceIdExactScore() ? _this.fields.deviceIdExactScore() : 0),
              firstNameExactScore: parseInt(_this.fields.firstNameExactScore() ? _this.fields.firstNameExactScore() : 0),
              lastNameExactScore: parseInt(_this.fields.lastNameExactScore() ? _this.fields.lastNameExactScore() : 0),
              usernameExactScore: parseInt(_this.fields.usernameExactScore() ? _this.fields.usernameExactScore() : 0),
              addressExactScore: parseInt(_this.fields.addressExactScore() ? _this.fields.addressExactScore() : 0),
              signUpIpExactScore: parseInt(_this.fields.signUpIpExactScore() ? _this.fields.signUpIpExactScore() : 0),
              mobilePhoneExactScore: parseInt(_this.fields.mobilePhoneExactScore() ? _this.fields.mobilePhoneExactScore() : 0),
              dateOfBirthExactScore: parseInt(_this.fields.dateOfBirthExactScore() ? _this.fields.dateOfBirthExactScore() : 0),
              emailAddressExactScore: parseInt(_this.fields.emailAddressExactScore() ? _this.fields.emailAddressExactScore() : 0),
              zipCodeExactScore: parseInt(_this.fields.zipCodeExactScore() ? _this.fields.zipCodeExactScore() : 0)
            });
          };
        })(this);
        this.totalExactScore = ko.computed((function(_this) {
          return function() {
            var addressExactScore, dateOfBirthExactScore, deviceIdExactScore, emailAddressExactScore, firstNameExactScore, fullNameExactScore, lastNameExactScore, mobilePhoneExactScore, score, signUpIpExactScore, usernameExactScore, zipCodeExactScore;
            score = 0;
            deviceIdExactScore = parseInt(_this.fields.deviceIdExactScore());
            if (!isNaN(deviceIdExactScore)) {
              score += deviceIdExactScore;
            }
            firstNameExactScore = parseInt(_this.fields.firstNameExactScore());
            if (!isNaN(firstNameExactScore)) {
              score += firstNameExactScore;
            }
            lastNameExactScore = parseInt(_this.fields.lastNameExactScore());
            if (!isNaN(lastNameExactScore)) {
              score += lastNameExactScore;
            }
            fullNameExactScore = parseInt(_this.fields.fullNameExactScore());
            if (!isNaN(fullNameExactScore)) {
              score += fullNameExactScore;
            }
            usernameExactScore = parseInt(_this.fields.usernameExactScore());
            if (!isNaN(usernameExactScore)) {
              score += usernameExactScore;
            }
            addressExactScore = parseInt(_this.fields.addressExactScore());
            if (!isNaN(addressExactScore)) {
              score += addressExactScore;
            }
            signUpIpExactScore = parseInt(_this.fields.signUpIpExactScore());
            if (!isNaN(signUpIpExactScore)) {
              score += signUpIpExactScore;
            }
            mobilePhoneExactScore = parseInt(_this.fields.mobilePhoneExactScore());
            if (!isNaN(mobilePhoneExactScore)) {
              score += mobilePhoneExactScore;
            }
            dateOfBirthExactScore = parseInt(_this.fields.dateOfBirthExactScore());
            if (!isNaN(dateOfBirthExactScore)) {
              score += dateOfBirthExactScore;
            }
            emailAddressExactScore = parseInt(_this.fields.emailAddressExactScore());
            if (!isNaN(emailAddressExactScore)) {
              score += emailAddressExactScore;
            }
            zipCodeExactScore = parseInt(_this.fields.zipCodeExactScore());
            if (!isNaN(zipCodeExactScore)) {
              score += zipCodeExactScore;
            }
            return score;
          };
        })(this));
        this.totalFuzzyScore = ko.computed((function(_this) {
          return function() {
            var addressFuzzyScore, dateOfBirthFuzzyScore, deviceIdFuzzyScore, emailAddressFuzzyScore, firstNameFuzzyScore, fullNameFuzzyScore, lastNameFuzzyScore, mobilePhoneFuzzyScore, score, signUpIpFuzzyScore, usernameFuzzyScore, zipCodeFuzzyScore;
            score = 0;
            deviceIdFuzzyScore = parseInt(_this.fields.deviceIdFuzzyScore());
            if (!isNaN(deviceIdFuzzyScore)) {
              score += deviceIdFuzzyScore;
            }
            firstNameFuzzyScore = parseInt(_this.fields.firstNameFuzzyScore());
            if (!isNaN(firstNameFuzzyScore)) {
              score += firstNameFuzzyScore;
            }
            lastNameFuzzyScore = parseInt(_this.fields.lastNameFuzzyScore());
            if (!isNaN(lastNameFuzzyScore)) {
              score += lastNameFuzzyScore;
            }
            fullNameFuzzyScore = parseInt(_this.fields.fullNameFuzzyScore());
            if (!isNaN(fullNameFuzzyScore)) {
              score += fullNameFuzzyScore;
            }
            usernameFuzzyScore = parseInt(_this.fields.usernameFuzzyScore());
            if (!isNaN(usernameFuzzyScore)) {
              score += usernameFuzzyScore;
            }
            addressFuzzyScore = parseInt(_this.fields.addressFuzzyScore());
            if (!isNaN(addressFuzzyScore)) {
              score += addressFuzzyScore;
            }
            signUpIpFuzzyScore = parseInt(_this.fields.signUpIpFuzzyScore());
            if (!isNaN(signUpIpFuzzyScore)) {
              score += signUpIpFuzzyScore;
            }
            mobilePhoneFuzzyScore = parseInt(_this.fields.mobilePhoneFuzzyScore());
            if (!isNaN(mobilePhoneFuzzyScore)) {
              score += mobilePhoneFuzzyScore;
            }
            dateOfBirthFuzzyScore = parseInt(_this.fields.dateOfBirthFuzzyScore());
            if (!isNaN(dateOfBirthFuzzyScore)) {
              score += dateOfBirthFuzzyScore;
            }
            emailAddressFuzzyScore = parseInt(_this.fields.emailAddressFuzzyScore());
            if (!isNaN(emailAddressFuzzyScore)) {
              score += emailAddressFuzzyScore;
            }
            zipCodeFuzzyScore = parseInt(_this.fields.zipCodeFuzzyScore());
            if (!isNaN(zipCodeFuzzyScore)) {
              score += zipCodeFuzzyScore;
            }
            return score;
          };
        })(this));
      }

      ViewModel.prototype.activate = function(data) {
        this.playerId(data.playerId);
        return $.get("DuplicateMechanism/GetConfiguration", {
          playerId: this.playerId()
        }).done((function(_this) {
          return function(response) {
            if (response.configuration) {
              _this.fields.deviceIdExactScore(response.configuration.deviceIdExactScore);
              _this.fields.firstNameExactScore(response.configuration.firstNameExactScore);
              _this.fields.lastNameExactScore(response.configuration.lastNameExactScore);
              _this.fields.fullNameExactScore(response.configuration.fullNameExactScore);
              _this.fields.usernameExactScore(response.configuration.usernameExactScore);
              _this.fields.addressExactScore(response.configuration.addressExactScore);
              _this.fields.signUpIpExactScore(response.configuration.signUpIpExactScore);
              _this.fields.mobilePhoneExactScore(response.configuration.mobilePhoneExactScore);
              _this.fields.dateOfBirthExactScore(response.configuration.dateOfBirthExactScore);
              _this.fields.emailAddressExactScore(response.configuration.emailAddressExactScore);
              _this.fields.zipCodeExactScore(response.configuration.zipCodeExactScore);
              _this.fields.deviceIdFuzzyScore(response.configuration.deviceIdFuzzyScore);
              _this.fields.firstNameFuzzyScore(response.configuration.firstNameFuzzyScore);
              _this.fields.lastNameFuzzyScore(response.configuration.lastNameFuzzyScore);
              _this.fields.fullNameFuzzyScore(response.configuration.fullNameFuzzyScore);
              _this.fields.usernameFuzzyScore(response.configuration.usernameFuzzyScore);
              _this.fields.addressFuzzyScore(response.configuration.addressFuzzyScore);
              _this.fields.signUpIpFuzzyScore(response.configuration.signUpIpFuzzyScore);
              _this.fields.mobilePhoneFuzzyScore(response.configuration.mobilePhoneFuzzyScore);
              _this.fields.dateOfBirthFuzzyScore(response.configuration.dateOfBirthFuzzyScore);
              _this.fields.emailAddressFuzzyScore(response.configuration.emailAddressFuzzyScore);
              return _this.fields.zipCodeFuzzyScore(response.configuration.zipCodeFuzzyScore);
            }
          };
        })(this));
      };

      ViewModel.prototype.attached = function(view) {
        var $grid, self;
        self = this;
        $grid = findGrid(view);
        $("form", view).submit(function() {
          $grid.trigger("reload");
          return false;
        });
        return $(view).on("click", ".jqgrow", function() {
          var data, table;
          self.selectedRowId($(this).attr("id"));
          table = $grid.find('.ui-jqgrid-btable');
          return data = table.jqGrid('getRowData', self.selectedRowId());
        });
      };

      ViewModel.prototype.setMetadata = function(data) {
        var arr;
        arr = this.metadata();
        arr.push({
          id: data[0],
          data: JSON.parse(data[1])
        });
        return this.metadata(arr);
      };

      ViewModel.prototype.colorClass = function(fieldName, value, id) {
        var c;
        c = _.findLast(this.metadata(), (function(_this) {
          return function(item) {
            return item.id === id;
          };
        })(this));
        if (_.include(c.data, fieldName)) {
          return '<span class="red">' + value + '</span>';
        } else {
          return value;
        }
      };

      return ViewModel;

    })();
  });

}).call(this);
