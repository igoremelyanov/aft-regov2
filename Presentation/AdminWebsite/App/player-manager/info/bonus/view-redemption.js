// Generated by IcedCoffeeScript 108.0.9
(function() {
  define(["nav", "komapping", "bonus/bonusCommon", "i18next", "config"], function(nav, mapping, common, i18N, config) {
    var ViewRedemptionModel;
    return ViewRedemptionModel = (function() {
      function ViewRedemptionModel() {
        var _ref;
        this.i18N = i18N;
        this.config = config;
        _ref = ko.observables(), this.LicenseeName = _ref[0], this.BrandName = _ref[1], this.Username = _ref[2], this.BonusName = _ref[3], this.ActivationState = _ref[4], this.RolloverState = _ref[5], this.Amount = _ref[6], this.LockedAmount = _ref[7], this.Rollover = _ref[8], this.activationData = _ref[9];
        this.vActivationState = ko.computed((function(_this) {
          return function() {
            return common.redemptionActivationFormatter(_this.ActivationState());
          };
        })(this));
        this.vRolloverState = ko.computed((function(_this) {
          return function() {
            return common.redemptionRolloverFormatter(_this.RolloverState());
          };
        })(this));
      }

      ViewRedemptionModel.prototype.attached = function(view) {
        var $grid;
        $grid = findGrid(view);
        return $("form", view).submit(function() {
          $grid.trigger("reload");
          return false;
        });
      };

      ViewRedemptionModel.prototype.activate = function(activationData) {
        this.activationData(activationData);
        return $.get(config.adminApi('/BonusHistory/Get'), activationData).done((function(_this) {
          return function(data) {
            return mapping.fromJS(data, {}, _this);
          };
        })(this));
      };

      ViewRedemptionModel.prototype.eventTypeFormatter = function() {
        return i18N.t("playerManager.bonusHistory.eventTypes." + this.DataType);
      };

      ViewRedemptionModel.prototype.eventDescriptionFormatter = function() {
        var field, template;
        template = i18N.t("playerManager.bonusHistory.eventTemplates." + this.DataType);
        if (this.Data != null) {
          for (field in this.Data) {
            template = template.replace("{" + field + "}", this.Data[field]);
          }
        }
        return template;
      };

      ViewRedemptionModel.prototype.cancel = function() {
        return nav.close();
      };

      return ViewRedemptionModel;

    })();
  });

}).call(this);
