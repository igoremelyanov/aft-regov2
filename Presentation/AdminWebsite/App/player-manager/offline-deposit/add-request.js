// Generated by IcedCoffeeScript 108.0.9
(function() {
  define(['nav', "i18next"], function(nav, i18n) {
    var CreateOfflineDepositRequest;
    return CreateOfflineDepositRequest = (function() {
      function CreateOfflineDepositRequest() {
        var noneBonus, _ref;
        _ref = ko.observables(), this.message = _ref[0], this.messageClass = _ref[1], this.playerId = _ref[2], this.username = _ref[3], this.selectedBankAccount = _ref[4], this.selectedBonus = _ref[5];
        this.disable = ko.observable(false);
        this.banks = ko.observableArray();
        this.amount = ko.observable().extend({
          formatDecimal: 2,
          validatable: true,
          required: true,
          min: {
            message: "Entered amount must be greater than 0.",
            params: 0.01
          },
          max: {
            message: "Entered amount is bigger than allowed.",
            params: 2147483647
          }
        });
        noneBonus = {
          id: null,
          name: i18n.t("app:common.none"),
          code: null
        };
        this.bonuses = ko.observableArray([noneBonus]);
        this.selectedBonus(noneBonus);
        this.bonusFormatter = function(bonus) {
          if (bonus.code != null) {
            return "" + bonus.code + ": " + bonus.name;
          } else {
            return "" + bonus.name;
          }
        };
        this.errors = ko.validation.group(this);
        this.IsJsonString = function(str) {
          var e;
          try {
            JSON.parse(str);
            return true;
          } catch (_error) {
            e = _error;
            return false;
          }
        };
      }

      CreateOfflineDepositRequest.prototype.close = function() {
        return nav.close();
      };

      CreateOfflineDepositRequest.prototype.activate = function(data) {
        return $.get('/offlineDeposit/GetInfoForCreate', {
          playerId: data.playerId
        }).done((function(_this) {
          return function(response) {
            var banks;
            banks = response.data.banks;
            _this.banks(banks);
            if (banks.length === 0) {
              _this.disable(true);
              _this.message(i18n.t("app:payment.paymentLevelDisableOfflineDeposit"));
              _this.messageClass("alert-danger");
            }
            _this.username(response.data.username);
            _this.playerId(data.playerId);
            return response.data.bonuses.forEach(function(bonus) {
              return _this.bonuses.push(bonus);
            });
          };
        })(this));
      };

      CreateOfflineDepositRequest.prototype.sendRequest = function() {
        if (this.isValid()) {
          this.message(null);
          this.messageClass(null);
          return $.post('/offlineDeposit/Create', {
            playerId: this.playerId(),
            bankAccountId: this.selectedBankAccount().id,
            bonusId: this.selectedBonus().id,
            amount: this.amount()
          }).done((function(_this) {
            return function(response) {
              var error;
              if (response.result === "failed") {
                if (_this.IsJsonString(response.data)) {
                  error = JSON.parse(response.data);
                  _this.message(i18n.t("app:payment.deposit.depositFailed") + i18n.t(error.text, error.variables));
                } else {
                  _this.message(i18n.t("app:payment.deposit.depositFailed") + i18n.t(response.data));
                }
                return _this.messageClass("alert-danger");
              } else {
                $('#offline-deposit-confirm-grid').trigger('reload');
                _this.close();
                return nav.open({
                  path: 'player-manager/offline-deposit/view-request',
                  title: i18n.t("app:payment.offlineDepositRequest.view"),
                  data: {
                    hash: '#offline-deposit-view',
                    requestId: response.data,
                    message: i18n.t("app:payment.deposit.successfullyCreated")
                  }
                });
              }
            };
          })(this));
        } else {
          return this.errors.showAllMessages();
        }
      };

      return CreateOfflineDepositRequest;

    })();
  });

}).call(this);
