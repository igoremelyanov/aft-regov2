// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var ViewModel, app, i18n, nav, security, shell, statusDialog;
    app = require("durandal/app");
    security = require("security/security");
    i18n = require("i18next");
    nav = require("nav");
    shell = require("shell");
    statusDialog = require("payments/player-bank-accounts/status-dialog");
    return ViewModel = (function(_super) {
      __extends(ViewModel, _super);

      function ViewModel() {
        this.setEventHandlers = __bind(this.setEventHandlers, this);
        this.reloadGrid = __bind(this.reloadGrid, this);
        ViewModel.__super__.constructor.apply(this, arguments);
        this.shell = shell;
        this.statusDialog = statusDialog;
        this.rowId = ko.observable();
        this.gridId = "player-bank-account-verify-grid";
        this.hasViewPermission = ko.observable(security.isOperationAllowed(security.permissions.view, security.categories.playerBankAccount));
        this.hasVerifyPermission = ko.observable(security.isOperationAllowed(security.permissions.verify, security.categories.playerBankAccount));
        this.hasRejectPermission = ko.observable(security.isOperationAllowed(security.permissions.reject, security.categories.playerBankAccount));
        this.compositionComplete = (function(_this) {
          return function() {
            return $(function() {
              return $(_this.gridId).on("gridLoad selectionChange", function(e, row) {
                return _this.rowId(row.id);
              });
            });
          };
        })(this);
        this.detached = (function(_this) {
          return function() {
            return _this.setEventHandlers(false);
          };
        })(this);
        this.setEventHandlers(true);
      }

      ViewModel.prototype.reloadGrid = function() {
        return $("#" + this.gridId).trigger("reload");
      };

      ViewModel.prototype.setEventHandlers = function(turnOn) {
        var event, events, _i, _j, _len, _len1, _results, _results1;
        events = ["player_bank_account_created", "player_bank_account_updated"];
        if (turnOn) {
          _results = [];
          for (_i = 0, _len = events.length; _i < _len; _i++) {
            event = events[_i];
            _results.push($(document).on(event, this.reloadGrid));
          }
          return _results;
        } else {
          _results1 = [];
          for (_j = 0, _len1 = events.length; _j < _len1; _j++) {
            event = events[_j];
            _results1.push($(document).off(event, this.reloadGrid));
          }
          return _results1;
        }
      };

      ViewModel.prototype.openViewTab = function() {
        return nav.open({
          path: "payments/player-bank-accounts/edit",
          title: i18n.t("app:banks.viewAccount"),
          data: {
            id: this.rowId(),
            isView: true,
            naming: {
              gridBodyId: this.gridId
            }
          }
        });
      };

      ViewModel.prototype.openVerifyDialog = function() {
        return this.statusDialog.show(this, true);
      };

      ViewModel.prototype.openRejectDialog = function() {
        return this.statusDialog.show(this, false);
      };

      return ViewModel;

    })(require("vmGrid"));
  });

}).call(this);
