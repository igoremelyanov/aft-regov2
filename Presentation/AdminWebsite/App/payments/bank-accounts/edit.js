// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var EditViewModel, baseModel, editBankAccountModel, i18n, nav, picker;
    nav = require("nav");
    i18n = require("i18next");
    picker = require("dateTimePicker");
    baseModel = require("base/base-view-model");
    editBankAccountModel = require("payments/bank-accounts/models/edit-bank-account-model");
    return EditViewModel = (function(_super) {
      __extends(EditViewModel, _super);

      function EditViewModel() {
        this.activate = __bind(this.activate, this);
        EditViewModel.__super__.constructor.apply(this, arguments);
        this.SavePath = "/BankAccounts/SaveChanges";
        this.submitted(false);
        this.message = ko.observable();
        this.messageClass = ko.observable();
        this.tmp = ko.observable();
      }

      EditViewModel.prototype.handleSaveFailure = function(response) {
        var error, field, fields, _i, _len, _results;
        fields = response != null ? response.fields : void 0;
        if (fields != null) {
          _results = [];
          for (_i = 0, _len = fields.length; _i < _len; _i++) {
            field = fields[_i];
            error = field.errors[0];
            _results.push(this.setError(this.Model[field.name], i18n.t("app:banks.validation." + error)));
          }
          return _results;
        }
      };

      EditViewModel.prototype.save = function() {
        var bankAccount, fd;
        this.clearMessage();
        if (this.Model.validate()) {
          bankAccount = {
            id: this.Model.id(),
            bank: this.Model.bankId(),
            brandId: this.Model.brandId(),
            licenseeId: this.Model.licenseeId(),
            currency: this.Model.currencyCode(),
            accountId: this.Model.bankAccountId(),
            accountName: this.Model.bankAccountName(),
            accountNumber: this.Model.bankAccountNumber(),
            accountType: this.Model.bankAccountAccountTypeId(),
            province: this.Model.bankAccountProvince(),
            branch: this.Model.bankAccountBranch(),
            remarks: this.Model.remarks(),
            supplierName: this.Model.supplierName(),
            contactNumber: this.Model.contactNumber(),
            uSBCode: this.Model.usbCode(),
            purchasedDate: this.Model.purchasedDate(),
            utilizationDate: this.Model.utilizationDate(),
            expirationDate: this.Model.expirationDate(),
            uploadId1Src: this.Model.uploadId1Src(),
            uploadId2Src: this.Model.uploadId2Src(),
            uploadId3Src: this.Model.uploadId3Src()
          };
          fd = new FormData();
          fd.append('uploadId1', $('input#' + this.Model.uploadId1FieldId())[0].files[0]);
          fd.append('uploadId2', $('input#' + this.Model.uploadId2FieldId())[0].files[0]);
          fd.append('uploadId3', $('input#' + this.Model.uploadId3FieldId())[0].files[0]);
          fd.append('bankAccount', JSON.stringify(bankAccount));
          return $.ajax({
            type: "POST",
            url: this.SavePath,
            data: fd,
            processData: false,
            contentType: false,
            xhr: (function(_this) {
              return function() {
                var req;
                req = new XMLHttpRequest();
                req.onreadystatechange = function(e) {
                  var response;
                  if (4 === req.readyState) {
                    response = JSON.parse(req.responseText);
                    if (response.result === "failed") {
                      _this.showError(response.data);
                    } else {
                      nav.close();
                      nav.open({
                        path: "payments/bank-accounts/view",
                        title: i18n.t("app:banks.viewAccount"),
                        key: response.data.id,
                        data: {
                          id: response.data.id,
                          message: i18n.t("app:bankAccounts.updated")
                        }
                      });
                      $('#bank-accounts-list').trigger('reloadGrid');
                    }
                    if (response.data.idFrontImage) {
                      _this.Model.uploadId1Src('image/Show?fileId=' + response.data.idFrontImage + '&playerId=' + _this.Model.id());
                    }
                    if (response.data.idBackImage) {
                      _this.Model.uploadId2Src('image/Show?fileId=' + response.data.idBackImage + '&playerId=' + _this.Model.id());
                    }
                    if (response.data.atmCardImage) {
                      _this.Model.uploadId3Src('image/Show?fileId=' + response.data.atmCardImage + '&playerId=' + _this.Model.id());
                    }
                    _this.showMessage("Updated successfully.");
                    return _this.submitted(true);
                  }
                };
                return req;
              };
            })(this)
          });
        } else {
          return this.showError(i18n.t("app:bankAccounts.notValid"));
        }
      };

      EditViewModel.prototype.activate = function(data) {
        EditViewModel.__super__.activate.apply(this, arguments);
        return $.get("/BankAccounts/Edit?id=" + data.id).done((function(_this) {
          return function(response) {
            _this.Model = new editBankAccountModel(response);
            if (response.idFrontImage) {
              _this.Model.uploadId1Src('image/Show?fileId=' + response.idFrontImage + '&playerId=' + _this.Model.id());
            }
            if (response.idBackImage) {
              _this.Model.uploadId2Src('image/Show?fileId=' + response.idBackImage + '&playerId=' + _this.Model.id());
            }
            if (response.atmCardImage) {
              return _this.Model.uploadId3Src('image/Show?fileId=' + response.atmCardImage + '&playerId=' + _this.Model.id());
            }
          };
        })(this));
      };

      EditViewModel.prototype.compositionComplete = function(data) {
        $('input#' + this.Model.uploadId1FieldId()).ace_file_input(this.Model.makeFileInputSettings(this.Model.idFrontImage));
        $('input#' + this.Model.uploadId2FieldId()).ace_file_input(this.Model.makeFileInputSettings(this.Model.idBackImage));
        return $('input#' + this.Model.uploadId3FieldId()).ace_file_input(this.Model.makeFileInputSettings(this.Model.atmCardImage));
      };

      EditViewModel.prototype.showError = function(msg) {
        this.message(msg);
        return this.messageClass('alert alert-danger');
      };

      EditViewModel.prototype.showMessage = function(msg) {
        this.message(msg);
        return this.messageClass('alert alert-success');
      };

      EditViewModel.prototype.clearMessage = function() {
        this.message('');
        return this.messageClass('');
      };

      EditViewModel.prototype.cancel = function() {
        return nav.close();
      };

      return EditViewModel;

    })(baseModel);
  });

}).call(this);
