// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var AddBankAccountModel, baseModel, common, config, i18n, mapping, moment, picker, regex;
    i18n = require("i18next");
    picker = require("datePicker");
    config = require("config");
    common = require("payments/bank-accounts/common");
    regex = require("regular-expression");
    baseModel = require("base/base-model");
    mapping = require("komapping");
    moment = require("moment");
    return AddBankAccountModel = (function(_super) {
      __extends(AddBankAccountModel, _super);

      function AddBankAccountModel() {
        AddBankAccountModel.__super__.constructor.apply(this, arguments);
        $.get("/Licensee/Licensees?useFilter=true").done((function(_this) {
          return function(data) {
            return _this.licensees(data.licensees);
          };
        })(this));
        this.licensees = this.makeSelect();
        this.licenseeId = ko.observable().extend({
          required: true
        });
        this.licenseeId.subscribe((function(_this) {
          return function(licenseeId) {
            var self;
            self = _this;
            if (licenseeId != null) {
              return $.get(config.adminApi("Brand/Brands?useFilter=true&licensees=" + licenseeId)).done(function(response) {
                return self.brands(response.brands);
              });
            }
          };
        })(this));
        this.brands = this.makeSelect();
        this.brandId = this.makeField().extend({
          required: true
        });
        this.brandId.subscribe((function(_this) {
          return function(brandId) {
            var self;
            self = _this;
            if (brandId != null) {
              $.get(config.adminApi("BrandCurrency/GetBrandCurrenciesWithNames?brandId=" + brandId)).done(function(response) {
                return self.currencies(response.currencyCodes);
              });
              return $.get("BankAccounts/GetBanks?brandId=" + brandId).done(function(response) {
                return self.banks(response.banks);
              });
            }
          };
        })(this));
        this.currencies = this.makeSelect();
        this.currencyCode = this.makeField().extend({
          required: true
        });
        this.bankAccountId = this.makeField().extend({
          required: true,
          maxLength: common.bankIdMaxLength,
          pattern: {
            message: i18n.t("bankAccounts.validation.AlphanumericDashUnderscoreSpace"),
            params: regex.alphaNumericDashUnderscoreSpace
          }
        });
        this.bankId = ko.observable().extend({
          required: true
        });
        this.banks = this.makeSelect();
        this.bankAccountNumber = this.makeField().extend({
          required: true,
          maxLength: common.bankAccountNumberMaxLength,
          pattern: {
            message: i18n.t("bankAccounts.validation.AlphanumericDashUnderscoreSpace"),
            params: regex.alphaNumericDashUnderscoreSpace
          }
        });
        this.bankAccountName = this.makeField().extend({
          required: true,
          maxLength: common.bankAccountNameMaxLength,
          pattern: {
            message: i18n.t("bankAccounts.validation.AlphanumericDashUnderscoreSpace"),
            params: regex.alphaNumericDashUnderscoreSpace
          }
        });
        this.bankAccountProvince = this.makeField().extend({
          required: true,
          maxLength: common.bankAccountProvinceMaxLength,
          pattern: {
            message: i18n.t("bankAccounts.validation.AlphanumericDashUnderscoreSpace"),
            params: regex.alphaNumericDashUnderscoreSpace
          }
        });
        this.bankAccountBranch = this.makeField().extend({
          required: true,
          maxLength: common.bankAccountBranchMaxLength,
          pattern: {
            message: i18n.t("bankAccounts.validation.AlphanumericDashUnderscoreSpace"),
            params: regex.alphaNumericDashUnderscoreSpace
          }
        });
        $.get("BankAccounts/GetBankAccountTypes").done((function(_this) {
          return function(data) {
            return _this.bankAccountAccountTypes(data.bankAccountTypes);
          };
        })(this));
        this.bankAccountAccountTypeId = ko.observable().extend({
          required: true
        });
        this.bankAccountAccountTypes = this.makeSelect();
        this.supplierName = this.makeField().extend({
          required: true,
          maxLength: common.supplierNameMaxLength
        });
        this.contactNumber = this.makeField().extend({
          required: true,
          maxLength: common.contactNumberMaxLength,
          pattern: {
            message: i18n.t("bankAccounts.validation.Numeric"),
            params: regex.numeric
          }
        });
        this.usbCode = this.makeField().extend({
          required: true,
          maxLength: common.usbCodeMaxLength,
          pattern: {
            message: i18n.t("bankAccounts.validation.Alphanumeric"),
            params: regex.alphaNumeric
          }
        });
        this.purchasedDate = this.makeField().extend({
          required: true
        });
        this.utilizationDate = this.makeField().extend({
          required: true
        });
        this.expirationDate = this.makeField().extend({
          required: true
        });
        this.maxSize = 4194304;
        this.uploadId1FieldId = ko.observable("bank-account-upload-id-1");
        this.uploadId1Src = ko.observable();
        this.file1Src = ko.observable();
        this.idFrontImage = this.makeField().extend({
          required: true,
          validation: {
            validator: (function(_this) {
              return function(val) {
                var element, file;
                element = $('input#' + _this.uploadId1FieldId())[0];
                file = element ? element.files[0] : void 0;
                return file && (file.size <= _this.maxSize);
              };
            })(this),
            message: 'Maximum file size is 4Mb.'
          }
        });
        this.uploadId2FieldId = ko.observable("bank-account-upload-id-2");
        this.uploadId2Src = ko.observable();
        this.file2Src = ko.observable();
        this.idBackImage = this.makeField().extend({
          required: true,
          validation: {
            validator: (function(_this) {
              return function(val) {
                var element, file;
                element = $('input#' + _this.uploadId2FieldId())[0];
                file = element ? element.files[0] : void 0;
                return file && (file.size <= _this.maxSize);
              };
            })(this),
            message: 'Maximum file size is 4Mb.'
          }
        });
        this.uploadId3FieldId = ko.observable("bank-account-upload-id-3");
        this.uploadId3Src = ko.observable();
        this.file3Src = ko.observable();
        this.atmCardImage = this.makeField().extend({
          required: true,
          validation: {
            validator: (function(_this) {
              return function(val) {
                var element, file;
                element = $('input#' + _this.uploadId3FieldId())[0];
                file = element ? element.files[0] : void 0;
                return file && (file.size <= _this.maxSize);
              };
            })(this),
            message: 'Maximum file size is 4Mb.'
          }
        });
        this.remarks = this.makeField().extend({
          required: true,
          maxLength: common.remarksMaxLength
        });
      }

      AddBankAccountModel.prototype.makeFileInputSettings = function(resetOb) {
        return {
          style: 'well',
          btn_choose: "Drop image or click to choose",
          no_file: 'No File ...',
          droppable: true,
          thumbnail: 'fit',
          before_change: function(files, dropped) {
            var file, type;
            file = files[0];
            if (typeof file === "string") {
              if (!/\.(jpe?g|png|gif)$/i.test(file)) {
                return -1;
              }
            } else {
              if (file) {
                type = $.trim(file.type);
                if ((type.length > 0 && !/^image\/(jpe?g|png|gif)$/i.test(type)) || (type.length === 0 && !/\.(jpe?g|png|gif)$/i.test(file.name))) {
                  -1;
                }
              }
              return true;
            }
          },
          before_remove: function() {
            resetOb('');
            return true;
          }
        };
      };

      AddBankAccountModel.prototype.mapto = function() {
        var ignoreFields;
        ignoreFields = ["licensees", "licenseeId", "brands", "currencies"];
        return AddBankAccountModel.__super__.mapto.call(this, ignoreFields);
      };

      return AddBankAccountModel;

    })(baseModel);
  });

}).call(this);
