// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var ViewModel, app, i18n, nav, security, statusDialog;
    require("controls/grid");
    nav = require("nav");
    i18n = require("i18next");
    app = require("durandal/app");
    security = require("security/security");
    statusDialog = require("payments/payment-gateway-settings/status-dialog");
    return ViewModel = (function(_super) {
      __extends(ViewModel, _super);

      function ViewModel() {
        var _ref;
        ViewModel.__super__.constructor.apply(this, arguments);
        this.isAddAllowed = ko.observable(security.isOperationAllowed(security.permissions.create, security.categories.paymentGatewaySettings));
        this.isEditAllowed = ko.observable(security.isOperationAllowed(security.permissions.update, security.categories.paymentGatewaySettings));
        this.isActivateAllowed = ko.observable(security.isOperationAllowed(security.permissions.activate, security.categories.paymentGatewaySettings));
        this.isDeactivateAllowed = ko.observable(security.isOperationAllowed(security.permissions.deactivate, security.categories.paymentGatewaySettings));
        this.noRecordsFound = ko.observable(false);
        this.rowId = ko.observable();
        this.selectedRowId = ko.observable();
        this.brandNameSearchPattern = ko.observable();
        this.Search = ko.observable();
        this.canActivate = ko.observable(false);
        this.canDeactivate = ko.observable(false);
        this.canEdit = ko.observable(false);
        _ref = ko.observableArrays(), this.brands = _ref[0], this.licensees = _ref[1], this.paymentGateways = _ref[2], this.statuses = _ref[3];
        this.vipLevels = ko.observable({});
      }

      ViewModel.prototype.reloadGrid = function() {
        return $("#payment-gateway-settings-grid").trigger("reload");
      };

      ViewModel.prototype.rowChange = function(row) {
        this.canActivate(row.data.Status === "Inactive");
        this.canDeactivate(row.data.Status === "Active");
        this.canEdit(row.data.Status === "Inactive");
        return this.noRecordsFound(($("#payment-gateway-settings-grid")[0].gridParam("reccount")) === 0);
      };

      ViewModel.prototype.activate = function() {
        ViewModel.__super__.activate.apply(this, arguments);
        $.get('/PaymentSettings/LicenseesList').done((function(_this) {
          return function(response) {
            var item, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = response.length; _i < _len; _i++) {
              item = response[_i];
              _results.push(_this.licensees.push(item));
            }
            return _results;
          };
        })(this));
        $.get('/PaymentSettings/BrandsList').done((function(_this) {
          return function(response) {
            var item, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = response.length; _i < _len; _i++) {
              item = response[_i];
              _results.push(_this.brands.push(item));
            }
            return _results;
          };
        })(this));
        $.get("/PaymentSettings/StatusesList").done((function(_this) {
          return function(response) {
            var item, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = response.length; _i < _len; _i++) {
              item = response[_i];
              _results.push(_this.statuses.push(item));
            }
            return _results;
          };
        })(this));
        return $.get('/PaymentGatewaySettings/GetPaymentGateways').done((function(_this) {
          return function(response) {
            var item, _i, _len, _ref, _results;
            _ref = response.data.paymentGateways;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _results.push(_this.paymentGateways.push(item.name));
            }
            return _results;
          };
        })(this));
      };

      ViewModel.prototype.openAddTab = function() {
        return nav.open({
          path: "payments/payment-gateway-settings/details",
          title: i18n.t("app:payment.newPaymentGatewaySettings"),
          data: {
            pageMode: 'Add'
          }
        });
      };

      ViewModel.prototype.openEditTab = function() {
        if (this.rowId() != null) {
          return nav.open({
            path: "payments/payment-gateway-settings/details",
            title: i18n.t("app:payment.editPaymentGatewaySettings"),
            data: {
              id: this.rowId(),
              editMode: true,
              pageMode: 'Edit'
            }
          });
        }
      };

      ViewModel.prototype.openViewTab = function() {
        if (this.rowId() != null) {
          return nav.open({
            path: "payments/payment-gateway-settings/details",
            title: i18n.t("app:payment.viewPaymentGatewaySettings"),
            data: {
              id: this.rowId(),
              editMode: false,
              pageMode: 'View'
            }
          });
        }
      };

      ViewModel.prototype.openActivateDialog = function() {
        return statusDialog.show(this.canDeactivate(), this.rowId());
      };

      ViewModel.prototype.openDeactivateDialog = function() {
        return statusDialog.show(this.canDeactivate(), this.rowId());
      };

      return ViewModel;

    })(require("vmGrid"));
  });

}).call(this);
