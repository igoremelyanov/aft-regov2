// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var AddBankModel, baseModel, common, config, i18n, regex;
    i18n = require("i18next");
    config = require("config");
    common = require("payments/banks/common");
    regex = require("regular-expression");
    baseModel = require("base/base-model");
    return AddBankModel = (function(_super) {
      __extends(AddBankModel, _super);

      function AddBankModel() {
        AddBankModel.__super__.constructor.apply(this, arguments);
        $.get("/Licensee/Licensees?useFilter=true").done((function(_this) {
          return function(data) {
            return _this.licensees(data.licensees);
          };
        })(this));
        this.licensees = this.makeSelect();
        this.licenseeId = ko.observable().extend({
          required: true
        });
        this.licenseeId.subscribe((function(_this) {
          return function(licenseeId) {
            var self;
            self = _this;
            if (licenseeId != null) {
              return $.get(config.adminApi("Brand/Brands?useFilter=true&licensees=" + licenseeId)).done(function(response) {
                return self.brands(response.brands);
              });
            }
          };
        })(this));
        this.brands = this.makeSelect();
        this.brandId = this.makeField().extend({
          required: true
        });
        this.brandId.subscribe((function(_this) {
          return function(brandId) {
            var self;
            self = _this;
            if (brandId != null) {
              return $.get(config.adminApi("Brand/GetCountries?brandId=" + brandId)).done(function(response) {
                return self.countries(response.countries);
              });
            }
          };
        })(this));
        this.countries = this.makeSelect();
        this.countryCode = this.makeField().extend({
          required: true
        });
        this.bankId = this.makeField().extend({
          required: true,
          maxLength: common.bankIdMaxLength
        });
        this.bankName = this.makeField().extend({
          required: true,
          maxLength: common.bankNameMaxLength,
          pattern: {
            message: i18n.t("banks.validation.AlphanumericDashUnderscoreSpace"),
            params: regex.alphaNumericDashUnderscoreSpace
          }
        });
        this.remarks = this.makeField().extend({
          required: true,
          maxLength: common.remarksMaxLength
        });
      }

      AddBankModel.prototype.mapto = function() {
        var ignoreFields;
        ignoreFields = ["licensees", "licenseeId", "brands", "countries"];
        return AddBankModel.__super__.mapto.call(this, ignoreFields);
      };

      return AddBankModel;

    })(baseModel);
  });

}).call(this);
