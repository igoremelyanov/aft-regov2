// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["nav", "i18next", "security/security", "dateTimePicker", "EntityFormUtil", "shell"], function(nav, i18N, security, dateTimePicker, efu, shell) {
    var SignUpFraudTypeViewModel;
    return SignUpFraudTypeViewModel = (function() {
      var handleSaveFailure, handleSaveSuccess, naming;

      function SignUpFraudTypeViewModel() {
        this.loadSystemActions = __bind(this.loadSystemActions, this);
        this.loadFraudRisks = __bind(this.loadFraudRisks, this);
        this.loadConfiguration = __bind(this.loadConfiguration, this);
        this.activate = __bind(this.activate, this);
        var fieldsList, riskLevelsFields, systemActionField;
        this.message = ko.observable("");
        this.messageClass = ko.observable();
        this.form = new efu.Form(this);
        this.isReadOnly = ko.observable(false);
        this.configuration = ko.observable();
        this.form.makeField("id", ko.observable()).lockValue(true);
        this.form.makeField("fraudTypeName", ko.observable().extend({
          required: true,
          maxLength: 50
        }));
        this.form.makeField("remarks", ko.observable().extend({
          required: true,
          maxLength: 200
        }));
        systemActionField = this.form.makeField("systemAction", ko.observable().extend({
          required: true
        })).hasOptions();
        systemActionField.setSerializer(function() {
          return systemActionField.value().value;
        });
        systemActionField.setDisplay(ko.computed(function() {
          var _ref;
          return (_ref = systemActionField.value()) != null ? _ref.name : void 0;
        }));
        this.fraudRiskLevelsAssignControl = new efu.AssignControl();
        riskLevelsFields = this.form.makeField("riskLevels", this.fraudRiskLevelsAssignControl.assignedItems);
        riskLevelsFields.setSerializer(function() {
          var i, ids, riskLevels;
          ids = [];
          riskLevels = riskLevelsFields.value();
          i = 0;
          while (i < riskLevels.length) {
            ids[i] = riskLevels[i].id;
            i++;
          }
          return ids;
        });
        fieldsList = ["riskLevels", "fraudTypeName", "systemAction", "remarks"];
        efu.publishIds(this, "signup-fraud-type-", fieldsList);
        efu.addCommonMembers(this);
        this.form.publishIsReadOnly(fieldsList);
      }

      SignUpFraudTypeViewModel.prototype.activate = function(data) {
        var deferred;
        deferred = $.Deferred();
        this.fields.id(data ? data.id : null);
        this.submitted(data.editMode === false);
        if (this.fields.id()) {
          this.loadConfiguration((function(_this) {
            return function() {
              return _this.loadFraudRisks(function() {
                return _this.loadSystemActions(function() {
                  return deferred.resolve();
                });
              });
            };
          })(this));
        } else {
          this.loadSystemActions((function(_this) {
            return function() {
              return _this.loadFraudRisks(function() {
                return deferred.resolve();
              });
            };
          })(this));
        }
        return deferred.promise();
      };

      SignUpFraudTypeViewModel.prototype.loadConfiguration = function(callback) {
        var deferred;
        deferred = $.Deferred();
        return $.ajax("SignUpFraudTypes/GetById?id=" + this.fields.id()).done((function(_this) {
          return function(response) {
            _this.fields.systemAction(response.systemAction);
            _this.fields.fraudTypeName(response.fraudTypeName);
            _this.fields.remarks(response.remarks);
            _this.configuration(response);
            deferred.resolve();
            return _this.callCallback(callback);
          };
        })(this));
      };

      SignUpFraudTypeViewModel.prototype.loadFraudRisks = function(callback, configuration) {
        var deferred;
        deferred = $.Deferred();
        $.ajax("SignUpFraudTypes/GetFraudRiskLevels").done((function(_this) {
          return function(response) {
            var assigned, item, notAssigned, _i, _len, _ref;
            assigned = [];
            notAssigned = [];
            if (_this.configuration()) {
              _ref = response.riskLevels;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (_.contains(_this.configuration().riskLevels, item.id)) {
                  assigned.push(item);
                } else {
                  notAssigned.push(item);
                }
              }
            } else {
              notAssigned = response.riskLevels;
            }
            _this.fraudRiskLevelsAssignControl.assignedItems(assigned);
            _this.fraudRiskLevelsAssignControl.availableItems(notAssigned);
            deferred.resolve();
            return _this.callCallback(callback);
          };
        })(this));
        return deferred.promise();
      };

      SignUpFraudTypeViewModel.prototype.loadSystemActions = function(callback, configuration) {
        var deferred;
        deferred = $.Deferred();
        $.ajax("SignUpFraudTypes/GetSystemActions").done((function(_this) {
          return function(response) {
            var selectedOne;
            _this.form.fields.systemAction.setOptions(response.systemActions);
            if (_this.configuration()) {
              selectedOne = _.findLast(response.systemActions, function(item) {
                return item.value === _this.configuration().systemAction;
              });
              _this.form.fields.systemAction.value(selectedOne);
            }
            deferred.resolve();
            return _this.callCallback(callback);
          };
        })(this));
        return deferred.promise();
      };

      SignUpFraudTypeViewModel.prototype.callCallback = function(callback) {
        if (callback) {
          return callback();
        }
      };

      naming = {
        gridBodyId: "signup-fraud-types-list",
        editUrl: "SignUpFraudTypes/AddOrUpdate"
      };

      efu.addCommonEditFunctions(SignUpFraudTypeViewModel.prototype, naming);

      SignUpFraudTypeViewModel.prototype.callCallback = function(callback) {
        if (callback) {
          return callback();
        }
      };

      SignUpFraudTypeViewModel.prototype.serializeForm = function() {
        var res;
        res = this.form.getDataObject();
        return JSON.stringify(res);
      };

      handleSaveSuccess = SignUpFraudTypeViewModel.prototype.handleSaveSuccess;

      SignUpFraudTypeViewModel.prototype.handleSaveSuccess = function(response) {
        response.data = i18N.t("app:fraud.signUpFraudType.messages." + response.data.code);
        handleSaveSuccess.call(this, response);
        return nav.title(i18N.t("app:fraud.signUpFraudType.titles.view"));
      };

      handleSaveFailure = SignUpFraudTypeViewModel.prototype.handleSaveFailure;

      SignUpFraudTypeViewModel.prototype.handleSaveFailure = function(response) {
        response.data = i18N.t("app:fraud.signUpFraudType.messages." + response.data.code);
        handleSaveFailure.call(this, response);
        return nav.title(i18N.t("app:fraud.signUpFraudType.titles.failure"));
      };

      return SignUpFraudTypeViewModel;

    })();
  });

}).call(this);
