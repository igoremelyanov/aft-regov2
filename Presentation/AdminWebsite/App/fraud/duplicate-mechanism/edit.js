// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["nav", "i18next", "security/security", "dateTimePicker", "EntityFormUtil", "shell"], function(nav, i18N, security, dateTimePicker, efu, shell) {
    var DuplicateMechanismConfigViewModel;
    return DuplicateMechanismConfigViewModel = (function() {
      var handleSaveFailure, handleSaveSuccess, naming, save;

      function DuplicateMechanismConfigViewModel() {
        this.save = __bind(this.save, this);
        this.fillViewModel = __bind(this.fillViewModel, this);
        this.load = __bind(this.load, this);
        this.loadConfiguration = __bind(this.loadConfiguration, this);
        this.activate = __bind(this.activate, this);
        this.loadBrands = __bind(this.loadBrands, this);
        this.loadLicensees = __bind(this.loadLicensees, this);
        var fieldsList;
        this.message = ko.observable("");
        this.messageClass = ko.observable;
        this.form = new efu.Form(this);
        this.isReadOnly = ko.observable(false);
        efu.setupLicenseeField2(this);
        efu.setupBrandField2(this);
        this.dummyObservable = ko.observable();
        this.form.makeField("id", ko.observable()).lockValue(true);
        this.form.makeField("deviceIdExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("firstNameExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("lastNameExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("fullNameExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("usernameExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("addressExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("signUpIpExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("mobilePhoneExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("dateOfBirthExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("emailAddressExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("zipCodeExactScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("deviceIdFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("firstNameFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("lastNameFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("fullNameFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("usernameFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("addressFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("signUpIpFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("mobilePhoneFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("dateOfBirthFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("emailAddressFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("zipCodeFuzzyScore", ko.observable().extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("noHandlingScoreMax", ko.observable(0).extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("noHandlingScoreMin", ko.observable(0).extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3,
          validation: {
            validator: (function(_this) {
              return function(val) {
                return parseInt(_this.fields.noHandlingScoreMax()) >= parseInt(val);
              };
            })(this),
            message: "'From' value should be less or equals to 'To'."
          }
        }));
        this.form.makeField("noHandlingSystemAction", ko.observable().extend({
          required: true
        }));
        this.form.makeField("noHandlingDescr", ko.observable().extend({
          required: true
        }));
        this.form.makeField("recheckScoreMax", ko.observable(0).extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("recheckScoreMin", ko.observable(0).extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3,
          validation: {
            validator: (function(_this) {
              return function(val) {
                return parseInt(_this.fields.recheckScoreMax()) >= parseInt(val);
              };
            })(this),
            message: "'From' value should be less or equals to 'To'."
          }
        }));
        this.form.makeField("recheckSystemAction", ko.observable().extend({
          required: true
        }));
        this.form.makeField("recheckDescr", ko.observable().extend({
          required: true
        }));
        this.form.makeField("fraudulentScoreMax", ko.observable(0).extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3
        }));
        this.form.makeField("fraudulentScoreMin", ko.observable(0).extend({
          required: true,
          formatInt: {
            allowNegative: false,
            allowEmpty: false
          },
          maxLength: 3,
          validation: {
            validator: (function(_this) {
              return function(val) {
                return parseInt(_this.fields.fraudulentScoreMax()) >= parseInt(val);
              };
            })(this),
            message: "'From' value should be less or equals to 'To'."
          }
        }));
        this.form.makeField("fraudulentSystemAction", ko.observable().extend({
          required: true
        }));
        this.form.makeField("fraudulentDescr", ko.observable().extend({
          required: true
        }));
        fieldsList = ["licensee", "brand", "deviceIdExactScore", "firstNameExactScore", "lastNameExactScore", "fullNameExactScore", "usernameExactScore", "addressExactScore", "signUpIpExactScore", "mobilePhoneExactScore", "dateOfBirthExactScore", "emailAddressExactScore", "zipCodeExactScore", "deviceIdFuzzyScore", "firstNameFuzzyScore", "lastNameFuzzyScore", "fullNameFuzzyScore", "usernameFuzzyScore", "addressFuzzyScore", "signUpIpFuzzyScore", "mobilePhoneFuzzyScore", "dateOfBirthFuzzyScore", "emailAddressFuzzyScore", "zipCodeFuzzyScore", "noHandlingScoreMin", "noHandlingScoreMax", "noHandlingSystemAction", "noHandlingDescr", "recheckScoreMin", "recheckScoreMax", "recheckSystemAction", "recheckDescr", "fraudulentScoreMin", "fraudulentScoreMax", "fraudulentSystemAction", "fraudulentDescr"];
        this.actions = ko.observableArray([
          {
            text: "No Action",
            value: 0
          }, {
            text: "Freeze Account",
            value: 1
          }, {
            text: "Disable Bonus",
            value: 2
          }, {
            text: "Deactivate",
            value: 3
          }
        ]);
        this.totalExactScore = ko.computed((function(_this) {
          return function() {
            var addressExactScore, dateOfBirthExactScore, deviceIdExactScore, emailAddressExactScore, firstNameExactScore, fullNameExactScore, lastNameExactScore, mobilePhoneExactScore, score, signUpIpExactScore, usernameExactScore, zipCodeExactScore;
            score = 0;
            deviceIdExactScore = parseInt(_this.fields.deviceIdExactScore());
            if (!isNaN(deviceIdExactScore)) {
              score += deviceIdExactScore;
            }
            firstNameExactScore = parseInt(_this.fields.firstNameExactScore());
            if (!isNaN(firstNameExactScore)) {
              score += firstNameExactScore;
            }
            lastNameExactScore = parseInt(_this.fields.lastNameExactScore());
            if (!isNaN(lastNameExactScore)) {
              score += lastNameExactScore;
            }
            fullNameExactScore = parseInt(_this.fields.fullNameExactScore());
            if (!isNaN(fullNameExactScore)) {
              score += fullNameExactScore;
            }
            usernameExactScore = parseInt(_this.fields.usernameExactScore());
            if (!isNaN(usernameExactScore)) {
              score += usernameExactScore;
            }
            addressExactScore = parseInt(_this.fields.addressExactScore());
            if (!isNaN(addressExactScore)) {
              score += addressExactScore;
            }
            signUpIpExactScore = parseInt(_this.fields.signUpIpExactScore());
            if (!isNaN(signUpIpExactScore)) {
              score += signUpIpExactScore;
            }
            mobilePhoneExactScore = parseInt(_this.fields.mobilePhoneExactScore());
            if (!isNaN(mobilePhoneExactScore)) {
              score += mobilePhoneExactScore;
            }
            dateOfBirthExactScore = parseInt(_this.fields.dateOfBirthExactScore());
            if (!isNaN(dateOfBirthExactScore)) {
              score += dateOfBirthExactScore;
            }
            emailAddressExactScore = parseInt(_this.fields.emailAddressExactScore());
            if (!isNaN(emailAddressExactScore)) {
              score += emailAddressExactScore;
            }
            zipCodeExactScore = parseInt(_this.fields.zipCodeExactScore());
            if (!isNaN(zipCodeExactScore)) {
              score += zipCodeExactScore;
            }
            return score;
          };
        })(this));
        this.totalExactScore.subscribe((function(_this) {
          return function(newValue) {
            return _this.fields.fraudulentScoreMax(newValue);
          };
        })(this));
        this.totalFuzzyScore = ko.computed((function(_this) {
          return function() {
            var addressFuzzyScore, dateOfBirthFuzzyScore, deviceIdFuzzyScore, emailAddressFuzzyScore, firstNameFuzzyScore, fullNameFuzzyScore, lastNameFuzzyScore, mobilePhoneFuzzyScore, score, signUpIpFuzzyScore, usernameFuzzyScore, zipCodeFuzzyScore;
            score = 0;
            deviceIdFuzzyScore = parseInt(_this.fields.deviceIdFuzzyScore());
            if (!isNaN(deviceIdFuzzyScore)) {
              score += deviceIdFuzzyScore;
            }
            firstNameFuzzyScore = parseInt(_this.fields.firstNameFuzzyScore());
            if (!isNaN(firstNameFuzzyScore)) {
              score += firstNameFuzzyScore;
            }
            lastNameFuzzyScore = parseInt(_this.fields.lastNameFuzzyScore());
            if (!isNaN(lastNameFuzzyScore)) {
              score += lastNameFuzzyScore;
            }
            fullNameFuzzyScore = parseInt(_this.fields.fullNameFuzzyScore());
            if (!isNaN(fullNameFuzzyScore)) {
              score += fullNameFuzzyScore;
            }
            usernameFuzzyScore = parseInt(_this.fields.usernameFuzzyScore());
            if (!isNaN(usernameFuzzyScore)) {
              score += usernameFuzzyScore;
            }
            addressFuzzyScore = parseInt(_this.fields.addressFuzzyScore());
            if (!isNaN(addressFuzzyScore)) {
              score += addressFuzzyScore;
            }
            signUpIpFuzzyScore = parseInt(_this.fields.signUpIpFuzzyScore());
            if (!isNaN(signUpIpFuzzyScore)) {
              score += signUpIpFuzzyScore;
            }
            mobilePhoneFuzzyScore = parseInt(_this.fields.mobilePhoneFuzzyScore());
            if (!isNaN(mobilePhoneFuzzyScore)) {
              score += mobilePhoneFuzzyScore;
            }
            dateOfBirthFuzzyScore = parseInt(_this.fields.dateOfBirthFuzzyScore());
            if (!isNaN(dateOfBirthFuzzyScore)) {
              score += dateOfBirthFuzzyScore;
            }
            emailAddressFuzzyScore = parseInt(_this.fields.emailAddressFuzzyScore());
            if (!isNaN(emailAddressFuzzyScore)) {
              score += emailAddressFuzzyScore;
            }
            zipCodeFuzzyScore = parseInt(_this.fields.zipCodeFuzzyScore());
            if (!isNaN(zipCodeFuzzyScore)) {
              score += zipCodeFuzzyScore;
            }
            return score;
          };
        })(this));
        efu.publishIds(this, "duplicate-", fieldsList);
        efu.addCommonMembers(this);
        this.form.publishIsReadOnly(fieldsList);
        this.getLicenseesUrl = function() {
          return "Licensee/Licensees?useFilter=true";
        };
        this.getBrandsUrl = (function(_this) {
          return function() {
            return "DuplicateMechanism/GetBrands?licensee=" + _this.form.fields.licensee.value().id + "&configId=" + _this.fields.id();
          };
        })(this);
        this.form.fields.licensee.value.subscribe((function(_this) {
          return function() {
            return efu.loadBrands2(_this.getBrandsUrl, _this.form.fields.brand);
          };
        })(this));
        this.configuration = void 0;
      }

      DuplicateMechanismConfigViewModel.prototype.loadLicensees = function(callback) {
        var licenseeId, licensees;
        licenseeId = efu.getBrandLicenseeId(shell);
        licensees = this.form.fields.licensee.options();
        if (this.configuration) {
          licenseeId = this.configuration.licensee;
        }
        efu.selectLicensee2(this.form.fields.licensee, licenseeId);
        return efu.loadBrands2(this.getBrandsUrl, this.form.fields.brand, (function(_this) {
          return function() {
            return _this.callCallback(callback);
          };
        })(this));
      };

      DuplicateMechanismConfigViewModel.prototype.loadBrands = function(callback) {
        var brandId;
        brandId = this.configuration ? this.configuration.brand : shell.brand().id();
        efu.selectBrand2(this.form.fields.brand, brandId);
        return this.callCallback(callback);
      };

      naming = {
        gridBodyId: "duplicate-configurations-list",
        editUrl: "DuplicateMechanism/AddOrUpdate"
      };

      efu.addCommonEditFunctions(DuplicateMechanismConfigViewModel.prototype, naming);

      DuplicateMechanismConfigViewModel.prototype.activate = function(data) {
        var deferred;
        deferred = $.Deferred();
        this.fields.id(data ? data.id : null);
        this.submitted(data.editMode === false);
        if (this.fields.id()) {
          this.loadConfiguration(deferred);
        } else {
          this.load(deferred);
        }
        return deferred.promise();
      };

      DuplicateMechanismConfigViewModel.prototype.loadConfiguration = function(deferred) {
        return $.ajax("DuplicateMechanism/GetById?id=" + this.fields.id(), {
          success: (function(_this) {
            return function(response) {
              _this.configuration = response;
              _this.fillViewModel();
              return _this.load(deferred);
            };
          })(this)
        });
      };

      DuplicateMechanismConfigViewModel.prototype.load = function(deferred) {
        return efu.loadLicensees2(this.getLicenseesUrl, this.form.fields.licensee, (function(_this) {
          return function() {
            return _this.loadLicensees(function() {
              return _this.loadBrands(function() {
                return deferred.resolve();
              });
            });
          };
        })(this));
      };

      DuplicateMechanismConfigViewModel.prototype.callCallback = function(callback) {
        if (callback) {
          return callback();
        }
      };

      DuplicateMechanismConfigViewModel.prototype.serializeForm = function() {
        var res;
        res = this.form.getDataObject();
        return JSON.stringify(res);
      };

      DuplicateMechanismConfigViewModel.prototype.fillViewModel = function() {
        this.fields.deviceIdExactScore(this.configuration.deviceIdExactScore);
        this.fields.firstNameExactScore(this.configuration.firstNameExactScore);
        this.fields.lastNameExactScore(this.configuration.lastNameExactScore);
        this.fields.fullNameExactScore(this.configuration.fullNameExactScore);
        this.fields.usernameExactScore(this.configuration.usernameExactScore);
        this.fields.addressExactScore(this.configuration.addressExactScore);
        this.fields.signUpIpExactScore(this.configuration.signUpIpExactScore);
        this.fields.mobilePhoneExactScore(this.configuration.mobilePhoneExactScore);
        this.fields.dateOfBirthExactScore(this.configuration.dateOfBirthExactScore);
        this.fields.emailAddressExactScore(this.configuration.emailAddressExactScore);
        this.fields.zipCodeExactScore(this.configuration.zipCodeExactScore);
        this.fields.deviceIdFuzzyScore(this.configuration.deviceIdFuzzyScore);
        this.fields.firstNameFuzzyScore(this.configuration.firstNameFuzzyScore);
        this.fields.lastNameFuzzyScore(this.configuration.lastNameFuzzyScore);
        this.fields.fullNameFuzzyScore(this.configuration.fullNameFuzzyScore);
        this.fields.usernameFuzzyScore(this.configuration.usernameFuzzyScore);
        this.fields.addressFuzzyScore(this.configuration.addressFuzzyScore);
        this.fields.signUpIpFuzzyScore(this.configuration.signUpIpFuzzyScore);
        this.fields.mobilePhoneFuzzyScore(this.configuration.mobilePhoneFuzzyScore);
        this.fields.dateOfBirthFuzzyScore(this.configuration.dateOfBirthFuzzyScore);
        this.fields.emailAddressFuzzyScore(this.configuration.emailAddressFuzzyScore);
        this.fields.zipCodeFuzzyScore(this.configuration.zipCodeFuzzyScore);
        this.fields.noHandlingScoreMin(this.configuration.noHandlingScoreMin);
        this.fields.noHandlingScoreMax(this.configuration.noHandlingScoreMax);
        this.fields.noHandlingSystemAction(this.configuration.noHandlingSystemAction);
        this.fields.noHandlingDescr(this.configuration.noHandlingDescr);
        this.fields.recheckScoreMin(this.configuration.recheckScoreMin);
        this.fields.recheckScoreMax(this.configuration.recheckScoreMax);
        this.fields.recheckSystemAction(this.configuration.recheckSystemAction);
        this.fields.recheckDescr(this.configuration.recheckDescr);
        this.fields.fraudulentScoreMin(this.configuration.fraudulentScoreMin);
        this.fields.fraudulentScoreMax(this.configuration.fraudulentScoreMax);
        this.fields.fraudulentSystemAction(this.configuration.fraudulentSystemAction);
        return this.fields.fraudulentDescr(this.configuration.fraudulentDescr);
      };

      save = DuplicateMechanismConfigViewModel.prototype.save;

      DuplicateMechanismConfigViewModel.prototype.save = function() {
        var hasErrors;
        hasErrors = false;
        if (!hasErrors) {
          return save.call(this);
        }
      };

      handleSaveSuccess = DuplicateMechanismConfigViewModel.prototype.handleSaveSuccess;

      DuplicateMechanismConfigViewModel.prototype.handleSaveSuccess = function(response) {
        response.data = i18N.t("app:fraud.duplicateMechanism.messages." + response.data.code);
        handleSaveSuccess.call(this, response);
        return nav.title(i18N.t("app:fraud.duplicateMechanism.titles.view"));
      };

      handleSaveFailure = DuplicateMechanismConfigViewModel.prototype.handleSaveFailure;

      DuplicateMechanismConfigViewModel.prototype.handleSaveFailure = function(response) {
        response.data = response.data;
        handleSaveFailure.call(this, response);
        return nav.title(i18N.t("app:fraud.duplicateMechanism.titles.failure"));
      };

      return DuplicateMechanismConfigViewModel;

    })();
  });

}).call(this);
