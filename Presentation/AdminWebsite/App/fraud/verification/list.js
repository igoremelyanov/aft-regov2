// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["nav", 'durandal/app', "i18next", "security/security", "shell", "controls/grid", "JqGridUtil", "CommonNaming", "fraud/verification/activate-dialog", "fraud/verification/deactivate-dialog", "vmGrid"], function(nav, app, i18n, security, shell, common, jgu, CommonNaming, activateDialog, deactivateDialog, vmGrid) {
    var ViewModel;
    return ViewModel = (function(_super) {
      __extends(ViewModel, _super);

      function ViewModel() {
        ViewModel.__super__.constructor.apply(this, arguments);
        this.naming = new CommonNaming("verification-manager");
        this.gridId = "#verification-manager-list";
        this.rowId = ko.observable();
        this.shell = shell;
        this.isAddAllowed = ko.observable(security.isOperationAllowed(security.permissions.create, security.categories.autoVerificationConfiguration));
        this.isEditAllowed = ko.observable(security.isOperationAllowed(security.permissions.update, security.categories.autoVerificationConfiguration));
        this.isDeleteAllowed = ko.observable(security.isOperationAllowed(security.permissions["delete"], security.categories.autoVerificationConfiguration));
        this.isActivateAllowed = ko.observable(security.isOperationAllowed(security.permissions.activate, security.categories.autoVerificationConfiguration));
        this.isDeactivateAllowed = ko.observable(security.isOperationAllowed(security.permissions.deactivate, security.categories.autoVerificationConfiguration));
        this.canActivate = ko.observable(false);
        this.canDeactivate = ko.observable(false);
        this.compositionComplete = (function(_this) {
          return function() {
            return $(function() {
              return $(_this.gridId).on("gridLoad selectionChange", function(e, row) {
                _this.rowId(row.id);
                _this.canActivate(row.data.Status === "Inactive");
                return _this.canDeactivate(row.data.Status === "Active");
              });
            });
          };
        })(this);
      }

      ViewModel.onBrandChanged = function() {
        return $(ViewModel.gridId).trigger("reload");
      };

      $(document).on("brand_changed", ViewModel.onBrandChanged);

      ViewModel.detached = function() {
        return $(document).off("brand_changed", ViewModel.onBrandChanged);
      };

      ViewModel.prototype.add = function() {
        return nav.open({
          path: 'fraud/verification/edit',
          title: "New Auto Verification Configuration",
          data: {
            editMode: true
          }
        });
      };

      ViewModel.prototype.openViewTab = function() {
        return nav.open({
          path: 'fraud/verification/edit',
          title: "View Auto Verification Configuration",
          data: {
            id: this.rowId(),
            editMode: false
          }
        });
      };

      ViewModel.prototype.openEditTab = function() {
        return nav.open({
          path: 'fraud/verification/edit',
          title: "Edit Auto Verification Configuration",
          data: {
            id: this.rowId(),
            editMode: true
          }
        });
      };

      ViewModel.prototype.openActivateDialog = function() {
        return activateDialog.show(this, this.rowId());
      };

      ViewModel.prototype.openDeactivateDialog = function() {
        return deactivateDialog.show(this, this.rowId());
      };

      return ViewModel;

    })(vmGrid);
  });

}).call(this);
