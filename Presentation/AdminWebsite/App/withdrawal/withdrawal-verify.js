// Generated by IcedCoffeeScript 108.0.9
(function() {
  define(function(require) {
    var ViewModel, i18n, nav, withdrawalLogDialogViewModel;
    i18n = require("i18next");
    nav = require("nav");
    withdrawalLogDialogViewModel = require("withdrawal/withdrawal-log-dialog");
    return ViewModel = (function() {
      function ViewModel() {
        this.id = ko.observable();
        this.licenseeName = ko.observable();
        this.brandName = ko.observable();
        this.username = ko.observable();
        this.referenceCode = ko.observable();
        this.status = ko.observable();
        this.internalAccount = ko.observable();
        this.currency = ko.observable();
        this.paymentMethod = ko.observable();
        this.amount = ko.observable();
        this.submittedBy = ko.observable();
        this.dateSubmitted = ko.observable();
        this.bankName = ko.observable();
        this.bankAccountName = ko.observable();
        this.bankAccountNumber = ko.observable();
        this.branch = ko.observable();
        this.swiftCode = ko.observable();
        this.address = ko.observable();
        this.city = ko.observable();
        this.province = ko.observable();
        this.remarks = ko.observable();
        this.queueWeMadeTheCallFrom = ko.observable();
        this.message = ko.observable();
        this.messageCss = ko.observable();
        this.isSubmitted = ko.observable(false);
        this.event = ko.observable();
        this.gridId = ko.observable();
        this.hasAutoVerification = ko.observable(false);
        this.autoVerificationStatus = ko.observable();
        this.autoVerificationDate = ko.observable();
        this.hasRiskLevel = ko.observable(false);
        this.riskLevelStatus = ko.observable();
        this.riskLevelDate = ko.observable();
        this.hasVerificationQueue = ko.observable(false);
        this.verificationQueueResult = ko.observable();
        this.verificationHandledBy = ko.observable();
        this.verificationDateHandled = ko.observable();
        this.hasOnHoldQueue = ko.observable(false);
        this.OnHoldResult = ko.observable();
        this.OnHoldHandledBy = ko.observable();
        this.OnHoldDateHandled = ko.observable();
        this.hasDocuments = ko.observable(false);
        this.documentsStatus = ko.observable();
        this.documentsDate = ko.observable();
        this.hasInvestigation = ko.observable(false);
        this.investigationStatus = ko.observable();
        this.investigationDate = ko.observable();
        this.submitLabel = ko.observable("Submit");
        this.adminRemarks = ko.observableArray();
        this.playerRemarks = ko.observableArray();
        this.officer = ko.observable();
      }

      ViewModel.prototype.activate = function(data) {
        this.id(data.id);
        this.event(data.event);
        this.gridId(data.gridId);
        this.loadInfo();
        return this.queueWeMadeTheCallFrom(data.queueName);
      };

      ViewModel.prototype.loadInfo = function() {
        return $.ajax("OfflineWithdraw/WithdrawalInfo?id=" + this.id()).done((function(_this) {
          return function(data) {
            _this.licenseeName(data.baseInfo.licensee);
            _this.brandName(data.baseInfo.brand);
            _this.username(data.baseInfo.username);
            _this.referenceCode(data.baseInfo.referenceCode);
            _this.status(data.baseInfo.status);
            _this.internalAccount(data.baseInfo.internalAccount);
            _this.currency(data.baseInfo.currency);
            _this.paymentMethod(data.baseInfo.paymentMethod);
            _this.amount(data.baseInfo.amount);
            _this.submittedBy(data.baseInfo.submitted);
            _this.dateSubmitted(data.baseInfo.dateSubmitted);
            _this.bankName(data.bankInformation.bankName);
            _this.bankAccountName(data.bankInformation.bankAccountName);
            _this.bankAccountNumber(data.bankInformation.bankAccountNumber);
            _this.branch(data.bankInformation.branch);
            _this.swiftCode(data.bankInformation.swiftCode);
            _this.address(data.bankInformation.address);
            _this.city(data.bankInformation.city);
            _this.province(data.bankInformation.province);
            _this.hasAutoVerification(data.processInformation.autoVerification.hasAutoVerification);
            _this.autoVerificationStatus(data.processInformation.autoVerification.status);
            _this.autoVerificationDate(data.processInformation.autoVerification.date);
            _this.hasRiskLevel(data.processInformation.riskLevel.hasRiskLevel);
            _this.riskLevelStatus(data.processInformation.riskLevel.status);
            _this.riskLevelDate(data.processInformation.riskLevel.date);
            _this.hasVerificationQueue(data.processInformation.verificationQueue.hasResult);
            _this.verificationQueueResult(data.processInformation.verificationQueue.result);
            _this.verificationHandledBy(data.processInformation.verificationQueue.handledBy);
            _this.verificationDateHandled(data.processInformation.verificationQueue.dateHandled);
            _this.hasOnHoldQueue(data.processInformation.onHoldQueue.hasResult);
            _this.OnHoldResult(data.processInformation.onHoldQueue.result);
            _this.OnHoldHandledBy(data.processInformation.onHoldQueue.handledBy);
            _this.OnHoldDateHandled(data.processInformation.onHoldQueue.dateHandled);
            _this.adminRemarks(data.remarks.adminRemarks);
            _this.playerRemarks(data.remarks.playerRemarks);
            return _this.officer(data.officer);
          };
        })(this));
      };

      ViewModel.prototype.reloadGrid = function() {
        return $(this.gridId()).trigger("reload");
      };

      ViewModel.prototype.submit = function() {
        var self, status, submittedEvent, url;
        self = this;
        url = "";
        status = "";
        if (this.event() === "cancel") {
          url = "offlinewithdraw/CancelRequest";
          status = "Canceled";
        }
        if (this.event() === "unverify") {
          url = "offlinewithdraw/unverify";
          status = "Unverified";
        }
        if (this.event() === "verify") {
          url = "offlinewithdraw/verify";
          status = "Verified";
        }
        if (this.event() === "accept") {
          url = "offlinewithdraw/accept";
          status = "Accepted";
        }
        if (this.event() === "revert") {
          url = "offlinewithdraw/revert";
          status = "Reverted";
        }
        if (this.event() === "release") {
          url = "offlinewithdraw/Approve";
          status = "Released";
        }
        if (this.event() === "documents") {
          url = "offlinewithdraw/documents";
          status = "Documents";
        }
        if (this.event() === "investigate") {
          url = "offlinewithdraw/investigate";
          status = "Investigate";
        }
        submittedEvent = this.event();
        return $.post(url, {
          requestId: this.id(),
          remarks: this.remarks()
        }).done(function(response) {
          self.adminRemarks.splice(0, 0, {
            user: self.officer,
            remark: self.remarks
          });
          self.message(i18n.t(response.data));
          if (response.result === "success") {
            $(document).trigger(self.getEventByName(submittedEvent));
            self.messageCss("alert alert-success left");
            self.isSubmitted(true);
            self.status(status);
          } else {
            self.messageCss("alert alert-danger left");
          }
          if (self.event() === "release") {
            return self.reloadAfterReleaseProcessed();
          } else {
            return self.reloadGrid();
          }
        });
      };

      ViewModel.prototype.reloadAfterReleaseProcessed = function() {
        var query, self, timeoutId;
        self = this;
        timeoutId = 0;
        query = function() {
          return $.get("offlinewithdraw/get?id=" + self.id()).done((function(_this) {
            return function(response) {
              if (response.data.status === 9) {
                clearTimeout(timeoutId);
                return self.reloadGrid();
              } else {
                return timeoutId = setTimeout(query, 5000);
              }
            };
          })(this));
        };
        return query();
      };

      ViewModel.prototype.close = function() {
        return nav.close();
      };

      ViewModel.prototype.clear = function() {
        return this.remarks("");
      };

      ViewModel.prototype.getEventByName = function(currentEvent) {
        if ((currentEvent === "cancel" || currentEvent === "accept") && this.gridId() === "#accept-grid") {
          return "acceptance_queue_changed";
        }
        if ((currentEvent === "cancel" || currentEvent === "release") && this.gridId() === "#release-grid") {
          return "release_queue_changed";
        }
      };

      ViewModel.prototype.avcStatus = function() {
        var dialog, id;
        id = this.id();
        dialog = new withdrawalLogDialogViewModel(id, "/OfflineWithdraw/AutoVerificationStatus");
        return dialog.show();
      };

      ViewModel.prototype.rvcStatus = function() {
        var dialog, id;
        id = this.id();
        dialog = new withdrawalLogDialogViewModel(id, "/OfflineWithdraw/RiskProfileCheckStatus");
        return dialog.show();
      };

      return ViewModel;

    })();
  });

}).call(this);
