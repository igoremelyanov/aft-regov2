// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var ViewModel, app, config, i18n, nav, security, shell, statusDialog;
    app = require("durandal/app");
    security = require("security/security");
    i18n = require("i18next");
    nav = require("nav");
    shell = require("shell");
    statusDialog = require("brand/brand-manager/status-dialog");
    config = require("config");
    return ViewModel = (function(_super) {
      __extends(ViewModel, _super);

      function ViewModel() {
        ViewModel.__super__.constructor.apply(this, arguments);
        this.config = config;
        this.shell = shell;
        this.gridId = "#brand-grid";
        this.rowId = ko.observable();
        this.canActivate = ko.observable();
        this.canDeactivate = ko.observable();
        this.canEdit = ko.observable(false);
        this.hasAddPermission = ko.observable(security.isOperationAllowed(security.permissions.create, security.categories.brandManager));
        this.hasEditPermission = ko.observable(security.isOperationAllowed(security.permissions.update, security.categories.brandManager));
        this.hasViewPermission = ko.observable(security.isOperationAllowed(security.permissions.view, security.categories.brandManager));
        this.hasActivatePermission = ko.observable(security.isOperationAllowed(security.permissions.activate, security.categories.brandManager));
        this.hasDeactivatePermission = ko.observable(security.isOperationAllowed(security.permissions.deactivate, security.categories.brandManager));
        this.compositionComplete = (function(_this) {
          return function() {
            return $(function() {
              return $(_this.gridId).on("gridLoad selectionChange", function(e, row) {
                _this.rowId(row.id);
                _this.canActivate(row.data.Status === "Inactive");
                _this.canDeactivate(row.data.Status === "Active");
                return _this.canEdit(_this.canActivate());
              });
            });
          };
        })(this);
        this.onBrandChanged = (function(_this) {
          return function() {
            return $(_this.gridId).trigger("reload");
          };
        })(this);
        $(document).on("brand_changed", this.onBrandChanged);
        this.detached = (function(_this) {
          return function() {
            return $(document).off("brand_changed", _this.onBrandChanged);
          };
        })(this);
      }

      ViewModel.prototype.openAddTab = function() {
        return nav.open({
          path: 'brand/brand-manager/add-brand',
          title: i18n.t("app:brand.newBrand")
        });
      };

      ViewModel.prototype.openEditTab = function() {
        var id;
        id = this.rowId();
        return nav.open({
          path: 'brand/brand-manager/edit-brand',
          title: i18n.t("app:brand.edit"),
          data: id != null ? {
            id: id
          } : void 0
        });
      };

      ViewModel.prototype.openViewTab = function() {
        var id;
        id = this.rowId();
        return nav.open({
          path: 'brand/brand-manager/view-brand',
          title: i18n.t("app:brand.view"),
          data: id != null ? {
            id: id
          } : void 0
        });
      };

      ViewModel.prototype.showActivateDialog = function() {
        return statusDialog.show(this.rowId());
      };

      ViewModel.prototype.showDeactivateDialog = function() {
        return statusDialog.show(this.rowId(), true);
      };

      return ViewModel;

    })(require("vmGrid"));
  });

}).call(this);
