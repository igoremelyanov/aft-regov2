// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var ViewModel, app, i18N, toastr;
    toastr = require("toastr");
    i18N = require("i18next");
    app = require("durandal/app");
    ViewModel = (function() {
      function ViewModel() {
        this.compositionComplete = __bind(this.compositionComplete, this);
        this.activate = __bind(this.activate, this);
        this.reload = __bind(this.reload, this);
        this.userName = ko.observable();
        this.operations = ko.observableArray();
        this.useroperations = ko.observableArray();
        this.licensees = ko.observableArray();
        this.isSingleBrand = ko.observable();
        this.isSuperAdmin = ko.observable();
        this.permissions = {};
        this.categories = {};
      }

      ViewModel.prototype.reload = function() {
        return $.post('/home/getsecuritydata', {}).then((function(_this) {
          return function(data) {
            console.log(data);
            if (data) {
              _this.userName(data.userName);
              _this.operations(data.operations);
              _this.useroperations(data.userPermissions);
              _this.licensees(data.licensees);
              _this.permissions = data.permissions;
              _this.categories = data.categories;
              _this.isSingleBrand(data.isSingleBrand);
              return _this.isSuperAdmin(data.isSuperAdmin);
            }
          };
        })(this));
      };

      ViewModel.prototype.activate = function() {
        return this.reload();
      };

      ViewModel.prototype.compositionComplete = function() {
        return $(document).ajaxError(function(event, jqXHR, ajaxSettings, thrownError) {
          var response;
          console.log("error");
          console.log(jqXHR);
          console.log(thrownError);
          switch (jqXHR.status) {
            case 500:
              response = jqXHR.responseJSON;
              if ((response != null) && (response.error_message != null)) {
                return toastr.error(response.error_message + " " + response.Message);
              }
              break;
            case 408:
            case 403:
              return location.reload();
            case 504:
              app.showMessage(i18N.t("app:common.sessionExpired"), i18N.t("app:common.sessionExpiredTitle"), [
                {
                  text: "OK",
                  value: true
                }
              ], false, {
                style: {
                  width: "350px"
                },
                "class": "messageBox center"
              }).then((function(_this) {
                return function(confirmed) {
                  $("#initial-loader").show();
                  return location.href = "Account/Logout";
                };
              })(this));
              return $(".modal-footer").toggleClass("center");
          }
        });
      };

      ViewModel.prototype.isOperationAllowed = function(permission, module) {
        var allowed, p, useroperations;
        console.log("isOperationAllowed");
        console.log(permission);
        console.log(module);
        console.log((function() {
          var _i, _len, _ref, _results;
          _ref = this.operations();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            if (this.useroperations.indexOf(p.id) > -1) {
              _results.push(p);
            }
          }
          return _results;
        }).call(this));
        useroperations = ko.utils.arrayFilter(this.operations, (function(_this) {
          return function(p) {
            return (ko.utils.arrayFirst(_this.useroperations, function(up) {
              return up === p.id;
            })) != null;
          };
        })(this));
        allowed = (function() {
          var _i, _len, _ref, _results;
          _ref = this.operations();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            if (this.useroperations.indexOf(p.id) > -1 && p.name === permission && p.module === module) {
              _results.push(p);
            }
          }
          return _results;
        }).call(this);
        console.log(allowed);
        return (allowed != null ? allowed.length : void 0) > 0;
      };

      return ViewModel;

    })();
    return new ViewModel();
  });

}).call(this);
