// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['i18next', 'config', 'datePicker'], function(i18n, config) {
    var Recipients;
    return Recipients = (function() {
      function Recipients(availableLicensees) {
        this.updateRecipients = __bind(this.updateRecipients, this);
        this.getDateAsUtc = __bind(this.getDateAsUtc, this);
        this.reload = __bind(this.reload, this);
        this.validateRegistrationDateChange = __bind(this.validateRegistrationDateChange, this);
        this.config = config;
        this.Id = ko.observable();
        this.searchGridSelector = "#mass-message-search-grid";
        this.recipientsGridSelector = "#mass-message-recipients-grid";
        this.allowChangeBrand = ko.observable(true);
        this.availableLicensees = ko.observableArray(availableLicensees);
        this.selectedLicensee = ko.observable();
        this.availableBrands = ko.computed((function(_this) {
          return function() {
            if (_this.selectedLicensee()) {
              return _this.selectedLicensee().brands;
            } else {
              return [];
            }
          };
        })(this));
        this.selectedBrand = ko.observable();
        this.availablePaymentLevels = ko.computed((function(_this) {
          return function() {
            if (_this.selectedBrand()) {
              return _this.selectedBrand().paymentLevels;
            } else {
              return [];
            }
          };
        })(this));
        this.availableVipLevels = ko.computed((function(_this) {
          return function() {
            if (_this.selectedBrand()) {
              return _this.selectedBrand().vipLevels;
            } else {
              return [];
            }
          };
        })(this));
        this.availableStatuses = ko.observableArray([
          {
            name: i18n.t("common.active"),
            value: 'Active'
          }, {
            name: i18n.t("common.inactive"),
            value: 'Inactive'
          }
        ]);
        this.registrationDateFrom = ko.observable();
        this.registrationDateFrom.subscribe((function(_this) {
          return function(value) {
            var reload;
            reload = _this.validateRegistrationDateChange(true);
            if (reload) {
              return _this.reload(_this.searchGridSelector);
            }
          };
        })(this));
        this.registrationDateTo = ko.observable();
        this.registrationDateTo.subscribe((function(_this) {
          return function(value) {
            var reload;
            reload = _this.validateRegistrationDateChange(false);
            if (reload) {
              return _this.reload(_this.searchGridSelector);
            }
          };
        })(this));
        this.BrandId = ko.computed((function(_this) {
          return function() {
            if (_this.selectedBrand()) {
              return _this.selectedBrand().id;
            } else {
              return null;
            }
          };
        })(this));
        this.BrandId.subscribe((function(_this) {
          return function() {
            return _this.reload(_this.searchGridSelector);
          };
        })(this));
        this.SearchTerm = ko.observable("");
        this.SearchTerm.extend({
          rateLimit: {
            timeout: 1000,
            method: "notifyWhenChangesStop"
          }
        });
        this.SearchTerm.subscribe((function(_this) {
          return function(value) {
            return _this.reload(_this.searchGridSelector);
          };
        })(this));
        this.PaymentLevelId = ko.observable();
        this.PaymentLevelId.subscribe((function(_this) {
          return function() {
            return _this.reload(_this.searchGridSelector);
          };
        })(this));
        this.VipLevelId = ko.observable();
        this.VipLevelId.subscribe((function(_this) {
          return function() {
            return _this.reload(_this.searchGridSelector);
          };
        })(this));
        this.Status = ko.observable();
        this.Status.subscribe((function(_this) {
          return function() {
            return _this.reload(_this.searchGridSelector);
          };
        })(this));
        this.RegistrationDateFrom = ko.observable("");
        this.RegistrationDateTo = ko.observable("");
        this.allowChangeBrand = ko.observable(true);
        this.all = ko.observable(i18n.t("common.all"));
        this.HasRecipients = ko.observable(false).extend({
          validation: {
            validator: (function(_this) {
              return function(val) {
                return val === true;
              };
            })(this),
            message: i18n.t("messaging.massMessage.recipientRequired")
          }
        });
        this.Languages = ko.observableArray();
        this.compositionComplete = (function(_this) {
          return function() {
            $(function() {
              var recipientsGridLoading, searchGridLoading;
              searchGridLoading = false;
              recipientsGridLoading = false;
              $(_this.searchGridSelector).on("selectionChange", function(e, row) {
                var playerId, updateType;
                if (searchGridLoading) {
                  return;
                }
                updateType = row.isSelected ? "SelectSingle" : "UnselectSingle";
                playerId = row.id;
                return _this.updateRecipients(updateType, playerId, [_this.recipientsGridSelector]);
              });
              $(_this.searchGridSelector).on("selectAllChange", function(e, data) {
                var updateType;
                updateType = data.allSelected ? "SearchResultSelectAll" : "SearchResultUnselectAll";
                return _this.updateRecipients(updateType, null, [_this.recipientsGridSelector]);
              });
              $(_this.recipientsGridSelector).on("selectionChange", function(e, row) {
                if (!recipientsGridLoading) {
                  return _this.updateRecipients("UnselectSingle", row.id, [_this.searchGridSelector, _this.recipientsGridSelector]);
                }
              });
              $(_this.recipientsGridSelector).on("selectAllChange", function(e, data) {
                if (!recipientsGridLoading) {
                  return _this.updateRecipients("RecipientsListUnselectAll", null, [_this.searchGridSelector, _this.recipientsGridSelector]);
                }
              });
              $(_this.searchGridSelector).on("gridLoad", function(e, data) {
                var grid, rowData, table, tableData, _i, _len, _ref;
                searchGridLoading = true;
                grid = $(_this.searchGridSelector);
                table = grid.find('.ui-jqgrid-btable');
                tableData = data.tableData;
                _ref = tableData.rows;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  rowData = _ref[_i];
                  if (rowData.cell.Selected) {
                    table.jqGrid('setSelection', rowData.id, true);
                  }
                }
                return searchGridLoading = false;
              });
              return $(_this.recipientsGridSelector).on("gridLoad", function(e, data) {
                var checkbox, grid;
                recipientsGridLoading = true;
                grid = $(_this.recipientsGridSelector);
                checkbox = grid.find('th input[type="checkbox"]');
                checkbox.click();
                return recipientsGridLoading = false;
              });
            });
            return ko.validation.group(_this);
          };
        })(this);
      }

      Recipients.prototype.validateRegistrationDateChange = function(fromDateChanged) {
        var fromDate, fromField, reload, toDate, toField;
        reload = true;
        fromField = $("input[data-bind*='datepicker: registrationDateFrom']");
        fromDate = fromField.datepicker('getDate');
        toField = $("input[data-bind*='datepicker: registrationDateTo']");
        toDate = toField.datepicker('getDate');
        if (fromDateChanged && fromDate) {
          this.RegistrationDateFrom(this.getDateAsUtc(fromDate));
        }
        if (!fromDateChanged && toDate) {
          this.RegistrationDateTo(this.getDateAsUtc(toDate));
        }
        if (toDate && fromDate) {
          if (fromDate > toDate) {
            reload = false;
            if (fromDateChanged) {
              toField.datepicker('setDate', fromDate);
            } else {
              fromField.datepicker('setDate', toDate);
            }
          }
        }
        return reload;
      };

      Recipients.prototype.reload = function(gridSelector) {
        return $(gridSelector).trigger("reload");
      };

      Recipients.prototype.getDateAsUtc = function(date) {
        return date.getFullYear() + "-" + this.pad(date.getMonth() + 1) + "-" + this.pad(date.getDate()) + 'T00:00:00-00:00Z';
      };

      Recipients.prototype.pad = function(number) {
        if (number < 10) {
          return "0" + number;
        } else {
          return number;
        }
      };

      Recipients.prototype.updateRecipients = function(updateType, playerId, gridsToUpdate) {
        var data;
        this.allowChangeBrand(false);
        data = {
          Id: this.Id(),
          UpdateRecipientsType: updateType,
          PlayerId: playerId,
          SearchPlayersRequest: {
            BrandId: this.BrandId(),
            SearchTerm: this.SearchTerm(),
            PaymentLevelId: this.PaymentLevelId(),
            VipLevelId: this.VipLevelId(),
            PlayerStatus: this.Status(),
            RegistrationDateFrom: this.RegistrationDateFrom(),
            RegistrationDateTo: this.RegistrationDateTo()
          }
        };
        return $.ajax({
          type: "POST",
          url: config.adminApi("MassMessage/UpdateRecipients"),
          data: ko.toJSON(data),
          dataType: "json",
          contentType: "application/json"
        }).done((function(_this) {
          return function(response) {
            _this.Id(response.id);
            _this.HasRecipients(response.hasRecipients);
            ko.mapping.fromJS(response.languages, {}, _this.Languages);
            return $.each(gridsToUpdate, function(index, value) {
              return _this.reload(value);
            });
          };
        })(this));
      };

      return Recipients;

    })();
  });

}).call(this);
