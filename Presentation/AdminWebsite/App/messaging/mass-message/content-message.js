// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var ContentMessage, aceEditor, i18n;
    i18n = require("i18next");
    aceEditor = require("ace-editor");
    return ContentMessage = (function() {
      function ContentMessage(id, languageCode, languageName) {
        this.loadEditors = __bind(this.loadEditors, this);
        var editorPrefix;
        this.languageCode = ko.observable(languageCode);
        this.languageName = ko.observable(languageName);
        this.onSite = ko.observable(false);
        this.onSiteSubject = ko.observable().extend({
          required: {
            params: true,
            onlyIf: this.onSite
          }
        });
        this.onSiteContent = ko.observable().extend({
          required: {
            params: true,
            onlyIf: this.onSite
          }
        });
        this.hasMessage = ko.observable().extend({
          validation: {
            params: true,
            validator: (function(_this) {
              return function(val) {
                return _this.onSite() === true;
              };
            })(this),
            message: i18n.t("messaging.massMessage.validation.NoMessageTypeSelected")
          }
        });
        editorPrefix = id + "-" + languageCode + "-";
        this.onSiteSubjectId = ko.observable(editorPrefix + "on-site-subject-editor");
        this.onSiteContentId = ko.observable(editorPrefix + "on-site-content-editor");
        ko.validation.group(this);
      }

      ContentMessage.prototype.loadEditors = function() {
        new aceEditor(this.onSiteSubjectId(), this.onSiteSubject, true, true);
        return new aceEditor(this.onSiteContentId(), this.onSiteContent, true, false);
      };

      return ContentMessage;

    })();
  });

}).call(this);
