// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['komapping', 'nav', 'i18next', 'config', './recipients', './content', './send-dialog', 'wizard'], function(mapping, nav, i18N, config, Recipients, Content, SendDialog) {
    var TemplateWizardModel;
    return TemplateWizardModel = (function() {
      function TemplateWizardModel() {
        this.getCurrentWizardCount = __bind(this.getCurrentWizardCount, this);
        this.disable = __bind(this.disable, this);
        this.enable = __bind(this.enable, this);
        this.toggleButtonsVisibility = __bind(this.toggleButtonsVisibility, this);
        this.showNext = __bind(this.showNext, this);
        this.show = __bind(this.show, this);
        this.backToRecipients = __bind(this.backToRecipients, this);
        this.bindingComplete = __bind(this.bindingComplete, this);
        this.activate = __bind(this.activate, this);
        this.send = __bind(this.send, this);
        this.submit = __bind(this.submit, this);
        var i, wizardCount;
        this.Id = ko.observable();
        this.serverErrors = ko.observable();
        this.steps = [
          {
            index: 0,
            name: "Recipients"
          }, {
            index: 1,
            name: "Content"
          }
        ];
        this.initialStep = this.steps[0];
        this.allowedSteps = ko.observableArray([this.steps[0]]);
        this.wizardSelector = ".template-wizard";
        wizardCount = this.getCurrentWizardCount();
        this.tabs = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = this.steps.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push({
              tabId: "tab" + (wizardCount * 10 + i),
              stepNumber: i + 1,
              stepName: i18N.t("messaging.massMessage.wizardSteps." + i)
            });
          }
          return _results;
        }).call(this);
        this.prevBtnClass = "wizard-prev" + wizardCount;
        this.nextBtnClass = "wizard-next" + wizardCount;
        this.closeBtnText = ko.observable();
        this.isNextBtnVisible = ko.observable(true);
        this.isPrevBtnVisible = ko.observable(true);
      }

      TemplateWizardModel.prototype.close = function() {
        return nav.close();
      };

      TemplateWizardModel.prototype.submit = function(tab, navigation, index) {
        if (!this.Recipients.isValid()) {
          this.Recipients.errors.showAllMessages();
          return false;
        }
        this.serverErrors(null);
        this.showNext(ko.utils.arrayFirst(this.steps, function(step) {
          return step.index === index;
        }));
        this.Content.Id(this.Recipients.Id());
        this.Content.setLanguages(this.Recipients.Languages());
        return true;
      };

      TemplateWizardModel.prototype.send = function() {
        var content, isValid, objectToSend;
        isValid = true;
        $.each(this.Content.Languages(), (function(_this) {
          return function(index, contentMessage) {
            var contentMessageIsValid;
            contentMessageIsValid = contentMessage.isValid();
            if (!contentMessageIsValid) {
              isValid = false;
              return contentMessage.errors.showAllMessages();
            }
          };
        })(this));
        if (isValid) {
          content = [];
          $.each(this.Content.Languages(), (function(_this) {
            return function(index, contentMessage) {
              return content.push({
                languageCode: contentMessage.languageCode(),
                onSite: contentMessage.onSite(),
                onSiteSubject: contentMessage.onSiteSubject(),
                onSiteContent: contentMessage.onSiteContent()
              });
            };
          })(this));
          objectToSend = {
            id: this.Content.Id(),
            content: content
          };
          return $.ajax({
            type: "POST",
            url: config.adminApi("MassMessage/Send"),
            data: ko.toJSON(objectToSend),
            dataType: "json",
            contentType: "application/json",
            traditional: true
          }).done((function(_this) {
            return function(data) {
              var sendDialog;
              if (data.isSent) {
                sendDialog = new SendDialog(_this.close);
                return sendDialog.show();
              }
            };
          })(this));
        }
      };

      TemplateWizardModel.prototype.activate = function(input) {
        return $.get(config.adminApi("MassMessage/GetNewData")).done((function(_this) {
          return function(response) {
            _this.Recipients = new Recipients(response.licensees);
            return _this.Content = new Content();
          };
        })(this));
      };

      TemplateWizardModel.prototype.bindingComplete = function() {
        var step, _i, _j, _len, _len1, _ref, _ref1;
        this.element = $(this.wizardSelector).last().bootstrapWizard({
          tabClass: "nav nav-pills nav-justified",
          previousSelector: "." + this.prevBtnClass,
          nextSelector: "." + this.nextBtnClass,
          onNext: this.submit,
          onTabClick: (function(_this) {
            return function(tab, navigation, currentIndex, index) {
              var result, returnValue;
              result = ko.utils.arrayFilter(_this.allowedSteps(), function(step) {
                return step.index === index;
              });
              returnValue = result.length > 0;
              if (currentIndex === 1 && index === 0) {
                _this.backToRecipients();
              }
              return returnValue;
            };
          })(this),
          onPrevious: this.backToRecipients,
          onTabShow: this.toggleButtonsVisibility
        });
        _ref = this.steps;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          step = _ref[_i];
          this.disable(step);
        }
        _ref1 = this.allowedSteps();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          step = _ref1[_j];
          this.enable(step);
        }
        return this.show(this.initialStep);
      };

      TemplateWizardModel.prototype.backToRecipients = function() {
        this.disable(this.steps[1]);
        this.allowedSteps.removeAll();
        return this.allowedSteps.push(this.steps[0]);
      };

      TemplateWizardModel.prototype.show = function(step) {
        return this.element.bootstrapWizard("show", step.index);
      };

      TemplateWizardModel.prototype.showNext = function(step) {
        this.allowedSteps.push(step);
        this.enable(step);
        return this.show(step);
      };

      TemplateWizardModel.prototype.toggleButtonsVisibility = function(tab, navigation, index) {
        var step;
        this.closeBtnText(i18N.t("common.close"));
        this.isNextBtnVisible(true);
        this.isPrevBtnVisible(true);
        step = this.steps[index];
        if (step === this.steps[0]) {
          this.isPrevBtnVisible(false);
        }
        if (step === this.steps[1]) {
          return this.isNextBtnVisible(false);
        }
      };

      TemplateWizardModel.prototype.enable = function(step) {
        return this.element.bootstrapWizard("enable", step.index);
      };

      TemplateWizardModel.prototype.disable = function(step) {
        return this.element.bootstrapWizard("disable", step.index);
      };

      TemplateWizardModel.prototype.getCurrentWizardCount = function() {
        var href, hrefs, maxTabNumber, tab, tabNumbers, wizardCount, wizardTabs;
        wizardCount = 0;
        wizardTabs = $("" + this.wizardSelector + " a[data-toggle='tab']");
        if (wizardTabs.length > 0) {
          hrefs = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = wizardTabs.length; _i < _len; _i++) {
              tab = wizardTabs[_i];
              _results.push($(tab).attr('href'));
            }
            return _results;
          })();
          tabNumbers = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = hrefs.length; _i < _len; _i++) {
              href = hrefs[_i];
              _results.push(parseInt(href.slice(4)));
            }
            return _results;
          })();
          maxTabNumber = Math.max.apply(Math, tabNumbers);
          wizardCount = Math.floor(maxTabNumber / 10) + 1;
        }
        return wizardCount;
      };

      return TemplateWizardModel;

    })();
  });

}).call(this);
