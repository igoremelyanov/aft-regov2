// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var ViewModel, aceEditor, baseViewModel, i18n, viewTemplateModel;
    i18n = require("i18next");
    baseViewModel = require("base/base-view-model");
    viewTemplateModel = require("messaging/message-templates/models/view-template-model");
    aceEditor = require("ace-editor");
    return ViewModel = (function(_super) {
      __extends(ViewModel, _super);

      function ViewModel() {
        this.activate = __bind(this.activate, this);
        ViewModel.__super__.constructor.apply(this, arguments);
      }

      ViewModel.prototype.activate = function(data) {
        ViewModel.__super__.activate.apply(this, arguments);
        return $.get("/MessageTemplate/View?id=" + data.id).done((function(_this) {
          return function(response) {
            _this.Model = new viewTemplateModel();
            _this.Model.licenseeName(response.licenseeName);
            _this.Model.brandName(response.brandName);
            _this.Model.languageName(response.languageName);
            _this.Model.messageType(i18n.t("messageTemplates.messageTypes." + response.messageType));
            _this.Model.messageDeliveryMethod(i18n.t("messageTemplates.deliveryMethods." + response.messageDeliveryMethod));
            _this.Model.templateName(response.templateName);
            _this.Model.subject(response.subject);
            _this.Model.messageContent(response.messageContent);
            _this.subjectEditorId = "view-template-subject-" + data.id;
            _this.messageEditorId = "view-template-message-" + data.id;
            return _this.isEmail = response.messageDeliveryMethod === "Email";
          };
        })(this));
      };

      ViewModel.prototype.compositionComplete = function() {
        new aceEditor(this.subjectEditorId, this.Model.subject, false, true);
        return new aceEditor(this.messageEditorId, this.Model.messageContent, false, false);
      };

      return ViewModel;

    })(baseViewModel);
  });

}).call(this);
