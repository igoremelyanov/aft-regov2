using System;
using System.Collections.Generic;
using System.Text;
using System.Web.Mvc;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AFT.RegoV2.AdminWebsite.Common.jqGrid
{
    /// <summary>
    /// A fluent jqGrid Html Helper.
    /// <remarks>
    /// Inspiration: http://www.webpirates.nl/webpirates/robin-van-der-knaap/47-fluent-jqgrid-html-helper-for-aspnet-mvc
    /// json object is generated by Json.NET instead of hand writting. It improves the readability and the maintainability.
    /// Works with jqGrid 4.1.2.
    /// Uses only part of the jqGrid functions. It's NOT a full wrapper of jqGrid.
    /// </remarks>
    /// </summary>
    public static class GridHelper
    {
        public static MvcHtmlString Grid(this HtmlHelper helper, Grid grid)
        {
            return grid.Render();
        }

        public static Grid Grid(string id)
        {
            return new Grid(id);
        }

        public static GridSetting.Column Column(string name)
        {
            return new GridSetting.Column(name);
        }

        public static GridSetting.Column Column(string name, string label)
        {
            return new GridSetting.Column(name, label);
        }

        public static GridSetting.Column Column(string name, string label, bool showColumnTooltip = true, bool freezeColumn = false)
        {
            return new GridSetting.Column(name, label, showColumnTooltip, freezeColumn);
        }

        public static Navigator Navigator()
        {
            return new Navigator();
        }

        public static SearchOption SearchOption()
        {
            return new SearchOption()
            {
                multipleSearch = true
            };
        }

        public static AdvancedFilter And()
        {
            return new AdvancedFilter
            {
                groupOp = LogicalOperator.AND
            };
        }

        public static AdvancedFilter Or()
        {
            return new AdvancedFilter
            {
                groupOp = LogicalOperator.OR
            };
        }
    }

    public class Grid
    {
        private string _id;
        private GridSetting _gridOption;
        private Navigator _navigator;
        private SearchOption _searchOption;
        private int _searchPopupWidth;
        private bool _showSearch;
        private bool _allowColumnReOrder;

        public Grid(string id)
        {
            _id = id;
            _showSearch = true;
            _gridOption = new GridSetting()
            {
                viewrecords = true
            };
            this.SetColumnReordering(true);
            this.SetSortable(true);
            // TODO Was originally loaded from configuration file.
            this.SetRowList(new[] { 10, 20, 30, 40, 50, 100 }, 0);
        }

        public Grid SetIgnoreCase(bool ignoreCase)
        {
            _gridOption.ignoreCase = ignoreCase;
            return this;
        }

        public Grid SetSortable(bool sortable)
        {
            _gridOption.sortable = sortable;
            return this;
        }

        public Grid SetColumnReordering(bool columnReordering)
        {
            _gridOption.columnReordering = columnReordering;
            return this;
        }

        public Grid AllowColumnReOrder(bool allowReorder)
        {
            _allowColumnReOrder = allowReorder;
            return this;
        }

        public Grid HideSearch()
        {
            _showSearch = false;
            return this;
        }

        public Grid DisplayFooterRow(bool enableFooterRow)
        {
            _gridOption.footerrow = enableFooterRow;
            _gridOption.userDataOnFooter = enableFooterRow;
            return this;
        }

        public Grid SetCaption(string caption)
        {
            _gridOption.caption = caption;
            return this;
        }

        public Grid SetWidth(int width)
        {
            _gridOption.width = width;
            return this;
        }

        public Grid SetSearchPopupWidth(int width)
        {
            _searchPopupWidth = width;
            return this;
        }

        public Grid AutoWidth()
        {
            _gridOption.autowidth = true;
            return this;
        }

        public Grid DisableShrinkToFit()
        {
            _gridOption.shrinkToFit = false;
            _gridOption.autowidth = true;
            return this;
        }

        public Grid SetHeight(int height)
        {
            _gridOption.height = height.ToString();
            return this;
        }

        public Grid SetHeightAutoScale()
        {
            _gridOption.height = "100%";
            return this;
        }

        public Grid AddColumn(GridSetting.Column column)
        {
            _gridOption.AddColumn(column);
            return this;
        }

        public Grid AddColumn(GridSetting.Column column, bool asInitialSortColumn, GridSetting.SortOrder sortOrder)
        {
            _gridOption.AddColumn(column);
            _gridOption.sortname = column.name;
            _gridOption.sortorder = sortOrder;

            return this;
        }

        public Grid SetNavigator(Navigator navigator)
        {
            _navigator = navigator;

            return this;
        }

        public Grid SetSearchOption(SearchOption searchOption)
        {
            _searchOption = searchOption;
            return this;
        }

        public Grid SetUrl(string url)
        {
            _gridOption.url = url;
            return this;
        }

        /// <summary>
        /// Suppress jqGrid from initially loading data.
        /// </summary>
        /// <returns></returns>
        public Grid SuppressData()
        {
            _gridOption.datatype = GridSetting.DataType.local;
            _gridOption.loadComplete = new JSFunction { Definition = "function(){jQuery(this).setGridParam({datatype: 'json'});}" };
            return this;
        }

        public Grid SetLocalData()
        {
            _gridOption.datatype = GridSetting.DataType.local;
            return this;
        }

        public Grid BindGridCompleteEvent()
        {
            _gridOption.gridComplete = new JSFunction { Definition = "function(){onGridComplete();}" };
            return this;
        }

        public Grid BindSelectRowEvent()
        {
            _gridOption.onSelectRow = new JSFunction { Definition = "function(rowId, status){onSelectGridRow(rowId, status);}" };
            return this;
        }

        public Grid BindLoadCompleteEvent()
        {
            _gridOption.loadComplete = new JSFunction { Definition = "function(data){onLoadComplete(data);}" };
            return this;
        }

        public Grid BindLoadErrorEvent()
        {
            _gridOption.loadError = new JSFunction { Definition = "function(xhr,status,error){onLoadError(data);}" };
            return this;
        }

        public Grid BindAfterInsertRowEvent()
        {
            _gridOption.afterInsertRow = new JSFunction { Definition = "function(rowid,rowdata){afterInsertRow(rowid,rowdata );}" };
            return this;
        }

        public Grid SetEditUrl(string editUrl)
        {
            _gridOption.editurl = editUrl;
            return this;
        }

        public Grid SetRowDefault(int number)
        {
            _gridOption.rowNum = number;
            return this;
        }

        public Grid SetRowList(int[] rowList, int initialIndex)
        {
            if (rowList == null || rowList.Length == 0)
            {
                throw new ArgumentException("rowList should not be null or empty.", "rowList");
            }

            _gridOption.rowList = rowList;
            _gridOption.rowNum = rowList[initialIndex];

            return this;
        }

        public Grid SetPager(string pagerId)
        {
            _gridOption.pager = "#" + pagerId;
            return this;
        }

        public Grid DisplayRowNumbers()
        {
            _gridOption.rownumbers = true;
            return this;
        }

        public Grid DisableViewRecords()
        {
            _gridOption.viewrecords = false;
            return this;
        }

        public Grid AllowMultiSelect()
        {
            _gridOption.multiselect = true;
            return this;
        }

        public MvcHtmlString Render()
        {
            string gridOption = ToJson(_gridOption);

            string buttonsOption = ToJson(_navigator.Buttons);
            string multipleSearch = ToJson(_searchOption);
            StringBuilder builder = new StringBuilder();
            builder.AppendFormat("jQuery('#{0}').jqGrid({1})", _id, gridOption);
            builder.AppendFormat(".navGrid('{0}',{1},{{}},{{}},{{}},{2})", _gridOption.pager, buttonsOption, multipleSearch);
            builder.Append(".setFrozenColumns()");
            ////builder.Append(".navButtonAdd('#pager',{caption:'Search',title:'Search', buttonicon:'ui-icon-search', onClickButton: function(){  jQuery('#search').dialog(); }, position:'first'});");
            if (_showSearch)
            {
                builder.Append(".navButtonAdd('#pager',{caption:$.jgrid.nav.searchtext,title:$.jgrid.nav.searchtitle, buttonicon:'ui-icon-search', onClickButton: function(){  jQuery('#search').dialog({width:" + _searchPopupWidth + ", modal: true, open: function(event, ui){$('body').css('overflow','hidden');} }); }, position:'first'})");
            }
            builder.Append(".navButtonAdd('#pager',{caption:$.jgrid.nav.refreshtext,title:$.jgrid.nav.refreshtitle, buttonicon:'ui-icon-refresh', onClickButton: function(){  gridUtility.searchData(gridUtility.$grid.getGridParam('page')); }, position:'second'})");
            if (_allowColumnReOrder)
            {
                builder.Append(".navButtonAdd('#pager',{caption:'Column',title:'Column Chooser', buttonicon:'ui-icon-calculator', onClickButton: function(){  gridUtility.bindColumnChooser(gridUtility.$grid); }, position:'third'})");
                builder.Append(".navButtonAdd('#pager',{caption:'Reset',title:'Reset Column', buttonicon:'ui-icon-key', onClickButton: function(){  gridUtility.resetColumns(gridUtility.$grid); }, position:'fourth'})");
            }
            return MvcHtmlString.Create(builder.ToString());
        }

        private static JsonSerializerSettings JsonSettings;
        private static Formatting JsonFormating;

        static Grid()
        {
            IList<JsonConverter> converters = new List<JsonConverter>();
            converters.Add(new StringEnumConverter());
            converters.Add(new JSFunctionConverter());
            JsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore,
                Converters = converters
            };
#if DEBUG
            JsonFormating = Formatting.Indented;
#else
            JsonFormating = Formatting.None;
#endif
        }

        private static string ToJson(object obj)
        {
            return JsonConvert.SerializeObject(obj, JsonFormating, JsonSettings);
        }
    }
}