// Generated by IcedCoffeeScript 108.0.9
(function() {
  var doesValueContainsLetters, isValidCurrency;

  isValidCurrency = function(val) {
    var reformattedValue, unformatted;
    unformatted = numeral().unformat(val);
    if (unformatted < 0) {
      return false;
    }
    if (unformatted.toString() === val.toString()) {
      return true;
    }
    reformattedValue = numeral(unformatted).format('0,0');
    return val === reformattedValue;
  };

  doesValueContainsLetters = function(val) {
    return /[a-z]/.test(val.toLowerCase());
  };

  ko.bindingHandlers['currency'] = {
    update: function(element, valueAccessor) {
      var output, unformatted, value, valueUnwrapped;
      value = valueAccessor();
      valueUnwrapped = ko.utils.unwrapObservable(value);
      if (valueUnwrapped === "" || valueUnwrapped === void 0) {
        return;
      }
      unformatted = numeral().unformat(valueUnwrapped);
      if (isValidCurrency(valueUnwrapped)) {
        output = numeral(unformatted).format('0,0');
        value(output);
        if ($(element).is('input') === true) {
          $(element).val(output);
        } else {
          $(element).text(output);
        }
      }
    }
  };

  ko.validation.rules['isValidAmount'] = {
    validator: (function(_this) {
      return function(val, otherVal) {
        if (isValidCurrency(val)) {
          return true;
        }
        return false;
      };
    })(this),
    message: 'Please enter valid amount.'
  };

  ko.validation.rules['notNegativeAmount'] = {
    validator: (function(_this) {
      return function(val, otherVal) {
        var unformatted, valueUnwrapped;
        if (isValidCurrency(val)) {
          return true;
        }
        valueUnwrapped = ko.utils.unwrapObservable(val);
        if (valueUnwrapped === "" || valueUnwrapped === void 0) {
          return;
        }
        unformatted = numeral().unformat(valueUnwrapped);
        if (isNaN(unformatted)) {
          return true;
        }
        return unformatted > 0;
      };
    })(this),
    message: 'Amount should be greater then zero.'
  };

  ko.validation.rules['mustNotContainLetters'] = {
    validator: (function(_this) {
      return function(val, otherVal) {
        var valueUnwrapped;
        if (isValidCurrency(val)) {
          return true;
        }
        valueUnwrapped = ko.utils.unwrapObservable(val);
        if (doesValueContainsLetters(valueUnwrapped)) {
          return false;
        }
        return true;
      };
    })(this),
    message: 'Amount shouldn\'t contain letters.'
  };

  ko.validation.registerExtenders();

}).call(this);
