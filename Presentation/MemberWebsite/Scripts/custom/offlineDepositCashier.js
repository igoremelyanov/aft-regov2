// Generated by CoffeeScript 1.10.0
(function() {
  var OfflineDeposit,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  OfflineDeposit = (function(superClass) {
    var model;

    extend(OfflineDeposit, superClass);

    function OfflineDeposit() {
      this.clearError = bind(this.clearError, this);
      this.setError = bind(this.setError, this);
      this.setAmount = bind(this.setAmount, this);
      this.selectBonus = bind(this.selectBonus, this);
      OfflineDeposit.__super__.constructor.apply(this, arguments);
      this.skipBonusModalId = "skipbonus-alert-modal";
      this.amount = ko.observable("0").extend({
        required: true,
        validatable: true,
        mustNotContainLetters: true,
        notNegativeAmount: true,
        isValidAmount: true,
        validation: [
          {
            validator: function(val, min) {
              var unformattedValue;
              unformattedValue = val.replace(/,/g, '');
              return unformattedValue >= min();
            },
            message: 'Amount must be greater or equals to a minimum deposit of ${0}',
            params: (function(_this) {
              return function() {
                return parseFloat($('#deposit-amount-min').val());
              };
            })(this)
          }, {
            validator: function(val, max) {
              var unformattedValue;
              if (max() === 0) {
                return true;
              }
              unformattedValue = val.replace(/,/g, '');
              return unformattedValue <= max();
            },
            message: 'Amount must be less or equals to a maximum deposit of ${0}',
            params: (function(_this) {
              return function() {
                return parseFloat($('#deposit-amount-max').val());
              };
            })(this)
          }
        ]
      });
      this.amount.subscribe((function(_this) {
        return function() {
          return _this.claimedBonus(void 0);
        };
      })(this));
      $.ajax("/api/GetVisibleDepositQualifiedBonuses", {
        success: (function(_this) {
          return function(response) {
            return _this.bonuses(response);
          };
        })(this)
      });
      this.parseAmountString = (function(_this) {
        return function(amountStr) {
          var purgedString;
          purgedString = amountStr.replace(/,/g, '');
          return parseFloat(purgedString);
        };
      })(this);
      this.amountEntered = ko.computed((function(_this) {
        return function() {
          var value;
          value = _this.parseAmountString(_this.amount());
          return value > 0;
        };
      })(this));
      this.bonuses = ko.observableArray();
      this.claimedBonus = ko.observable();
      this.depositCaption = ko.computed((function(_this) {
        return function() {
          if (_this.claimedBonus()) {
            return i18n.t("balanceInformation.depositAndGetBonus");
          }
          return "Deposit";
        };
      })(this));
      this.code = ko.observable('').extend({
        validatable: true
      });
      this.bank = ko.observable('').extend({
        validatable: true
      });
      this.remark = ko.observable('').extend({
        validatable: true
      });
      this.hasErrors = ko.observable(false);
      this.smsEnabled = ko.observable(false);
      this.emailEnabled = ko.observable(false);
      this.notificationMethod = ko.computed((function(_this) {
        return function() {
          if (_this.smsEnabled() && _this.emailEnabled()) {
            return 3;
          } else if (_this.emailEnabled()) {
            return 1;
          } else if (_this.smsEnabled()) {
            return 2;
          } else {
            return 0;
          }
        };
      })(this));
      this.submitCode = (function(_this) {
        return function() {
          var bonusByCode;
          _this.clearError(_this.code);
          bonusByCode = _.find(_this.bonuses(), function(item) {
            return item.code === _this.code();
          });
          if (bonusByCode !== void 0) {
            _this.claimedBonus(bonusByCode);
            return _this.code('');
          } else {
            return $.postJson("/api/ValidateFirstDepositBonus", {
              depositAmount: _this.amount(),
              bonusCode: _this.code()
            }).done(function(response) {
              var elem;
              if (response.isValid) {
                elem = _.find(_this.bonuses(), function(item) {
                  return item.id === response.bonus.id;
                });
                if (elem === void 0) {
                  _this.bonuses.unshift(response.bonus);
                  _this.claimedBonus(response.bonus);
                  return _this.code('');
                }
              } else {
                return _this.setError(_this.code, response.errors[0]);
              }
            }).fail(function(failResponse) {
              return popupAlert("Error occured.", "Contact an administrator.");
            });
          }
        };
      })(this);
      this.submitDeposit = function() {
        var bonusId;
        bonusId = this.claimedBonus() === void 0 ? null : this.claimedBonus().id;
        if (this.bonuses().length > 0 && bonusId === null) {
          return $("#" + this.skipBonusModalId).modal();
        } else {
          return this.goAheadWithDeposititng();
        }
      };
    }

    OfflineDeposit.prototype.selectBonus = function(bonusItem) {
      if (this.amount() < bonusItem.requiredAmount) {
        return;
      }
      if (this.claimedBonus() !== bonusItem) {
        return this.claimedBonus(bonusItem);
      } else {
        return this.claimedBonus(void 0);
      }
    };

    OfflineDeposit.prototype.setAmount = function(amount) {
      var addAmount;
      addAmount = this.parseAmountString(amount);
      return this.amount(addAmount.toString());
    };

    OfflineDeposit.prototype.setError = function(observable, errorMessage) {
      observable.error = errorMessage;
      return observable.__valid__(false);
    };

    OfflineDeposit.prototype.clearError = function(observable) {
      observable.error = '';
      return observable.__valid__(true);
    };

    OfflineDeposit.prototype.skipDepositAndGetBonus = function() {
      return $("#" + this.skipBonusModalId).modal('hide');
    };

    OfflineDeposit.prototype.goAheadWithDeposititng = function() {
      var bonusId;
      bonusId = this.claimedBonus() === void 0 ? null : this.claimedBonus().id;
      return $.postJson('/api/offlineDeposit', {
        BankAccountId: this.bank(),
        Amount: this.amount(),
        NotificationMethod: this.notificationMethod(),
        PlayerRemarks: this.remark(),
        BonusId: bonusId
      }).done((function(_this) {
        return function(response) {
          var query;
          query = "?depositId=" + response.id;
          if (response.bonusRedemptionId !== void 0) {
            query = query + "&redemptionId=" + response.bonusRedemptionId;
          }
          return redirect("Home/OfflineDepositConfirmation" + query);
        };
      })(this)).fail((function(_this) {
        return function(jqXHR) {
          return popupAlert("Error occured.", "Contact an administrator.");
        };
      })(this));
    };

    model = new OfflineDeposit;

    model.errors = ko.validation.group(model);

    ko.applyBindings(model, document.getElementById("cashier-wrapper"));

    return OfflineDeposit;

  })(FormBase);

}).call(this);
