// Generated by IcedCoffeeScript 108.0.9
(function() {
  var Login;

  Login = (function() {
    function Login() {
      Login.__super__.constructor.apply(this, arguments);
      this.username = ko.observable("").extend({
        validator: true
      });
      this.password = ko.observable("").extend({
        validator: true
      });
      this.captcha = ko.observable("").extend({
        validator: true
      });
      this.hasErrors = ko.observable(false);
      this.messages = ko.observableArray([]);
      this.requestInProgress = ko.observable(false);
      this.signIn = function() {
        this.clearValidations();
        this.requestInProgress(true);
        return $.postJson('/api/Login', {
          UserName: self.username(),
          Password: self.password()
        }).done(function() {
          camelCaseProperties(response);
          return redirect("/Home/PlayerProfile");
        }).fail(function(jqXHR) {
          var errors, response;
          response = JSON.parse(jqXHR.responseText);
          camelCaseProperties(response);
          this.messages([]);
          this.hasErrors(true);
          if (response.unexpected) {
            this.messages.push('Unexpected error occurred.');
          } else {
            errors = response.errors;
            if (errors && errors.length) {
              errors.forEach(function(error) {
                var messageKey, params;
                messageKey = "app:apiResponseCodes." + error.message;
                if (error.params.length === 0) {
                  return this.messages.push($.i18n.t(messageKey));
                } else {
                  params = new Object;
                  error.params.forEach(function(param) {
                    return params[param.name] = param.value;
                  });
                  return this.messages.push($.i18n.t(messageKey, params));
                }
              });
            } else if (response.message) {
              this.messages.push(response.message);
            }
          }
          return $('#login-messages').modal();
        }).always(function() {
          return this.requestInProgress(false);
        });
      };
      this.clearValidations = function() {
        this.username.setError(false);
        return this.password.setError(false);
      };
      this.toRegister = function() {
        return redirect("/Home/Register");
      };
      this.logout = function() {
        return $.postJson('/api/Logout').done(function(response) {
          return redirect("/");
        }).fail(function() {
          this.messages([]);
          this.messages.push('Unexpected error occurred.');
          return $('#login-messages').modal();
        });
      };
      this.resetPasswordUsername = ko.observable().extend({
        validator: true
      });
      this.resetPasswordEmail = ko.observable().extend({
        validator: true
      });
      this.resetPassword(function() {
        return $.postJson('api/ResetPassword', {
          Username: self.resetPasswordUsername(),
          Email: self.resetPasswordEmail()
        }).success(function() {
          $("#forgotPassword .step-1").hide().next().fadeIn();
          return console.log("Password Changed");
        }).fail(function(jqXHR) {
          var error, response;
          response = JSON.parse(jqXHR.responseText);
          error = response.message.charAt(0).toLowerCase() + response.message.slice(1);
          this.messages([]);
          this.messages.push($.t("login.validationMessages." + error));
          return $('#login-messages').modal();
        });
      });
      this.hideResetPassword(function() {
        return $("#forgotPassword").modal("hide");
      });
      $(document).ready(function() {
        return $('#forgotPassword').on('show.bs.modal', function() {
          return $('.modal-password-step:first').show().next().hide();
        });
      });
    }

    return Login;

  })();

  ko.extenders.validator = function(target) {
    target.hasError = ko.observable(false);
    target.messages = ko.observableArray([]);
    target.error = ko.observable();
    target.errorMessage = ko.observable();
    target.setError = function(val) {
      target.hasError(val);
      if (!val) {
        return target.messages([]);
      }
    };
    target.addErrorMessage = function(message) {
      return target.messages.push(message);
    };
    return target;
  };

  ko.applyBindings(new LoginModel(), document.getElementById("login-wrapper"));

  ko.applyBindings(new LoginModel(), document.getElementById("modal-login"));

}).call(this);
