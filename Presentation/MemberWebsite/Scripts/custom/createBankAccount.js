// Generated by IcedCoffeeScript 108.0.9
(function() {
  var CreateBankAccount, viewModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CreateBankAccount = (function(_super) {
    __extends(CreateBankAccount, _super);

    function CreateBankAccount() {
      CreateBankAccount.__super__.constructor.apply(this, arguments);
      $("#page").i18n();
      this.branch = ko.observable().extend({
        validatable: true
      });
      this.bankId = ko.observable().extend({
        validatable: true
      });
      this.accountName = ko.observable().extend({
        validatable: true
      });
      this.province = ko.observable().extend({
        validatable: true
      });
      this.accountNumber = ko.observable().extend({
        validatable: true
      });
      this.city = ko.observable().extend({
        validatable: true
      });
      this.banks = ko.observableArray();
      $.get("/api/getbanks").success((function(_this) {
        return function(response) {
          return _this.banks(response);
        };
      })(this));
      this.submitForm = (function(_this) {
        return function() {
          var data;
          data = {
            branch: _this.branch(),
            bank: _this.bankId(),
            accountName: _this.accountName(),
            province: _this.province(),
            accountNumber: _this.accountNumber(),
            city: _this.city()
          };
          $.postJson('/api/ValidatePlayerBankAccount', data).success(function(response) {
            if (response.hasError) {
              return $.each(response.errors, function(propName) {
                var observable;
                observable = _this[propName];
                observable.error = i18n.t(JSON.parse(response.errors[propName]).text);
                return observable.__valid__(false);
              });
            } else {
              return $.post('/api/CreatePlayerBankAccount', data).success(function(response) {
                return redirect('/home/withdrawal');
              });
            }
          });
          return false;
        };
      })(this);
    }

    return CreateBankAccount;

  })(FormBase);

  viewModel = new CreateBankAccount();

  ko.applyBindings(viewModel, document.getElementById("create-bank-account-wrapper"));

}).call(this);
