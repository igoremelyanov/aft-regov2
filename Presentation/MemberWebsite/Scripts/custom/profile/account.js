// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.AccountProfile = (function(_super) {
    __extends(AccountProfile, _super);

    function AccountProfile(id) {
      var self;
      this.id = id;
      this.resetField = __bind(this.resetField, this);
      this.showChangePasswordForm = __bind(this.showChangePasswordForm, this);
      this.changePassword = __bind(this.changePassword, this);
      AccountProfile.__super__.constructor.apply(this, arguments);
      self = this;
      self.username = ko.observable();
      self.currentPassword = ko.observable().extend({
        required: {
          params: true,
          message: $.i18n.t("app:resetPassword.FieldIsRequired")
        }
      });
      self.newPassword = ko.observable().extend({
        required: {
          params: true,
          message: $.i18n.t("app:resetPassword.FieldIsRequired")
        },
        minLength: {
          params: 6,
          message: $.i18n.t("app:resetPassword.PasswordIsNotWithinItsAllowedRange")
        },
        maxLength: {
          params: 12,
          message: $.i18n.t("app:resetPassword.PasswordIsNotWithinItsAllowedRange")
        }
      });
      self.confirmPassword = ko.observable().extend({
        required: {
          params: true,
          message: $.i18n.t("app:resetPassword.FieldIsRequired")
        },
        validation: {
          validator: (function(_this) {
            return function(val) {
              return val === self.newPassword();
            };
          })(this),
          message: $.i18n.t("app:resetPassword.PasswordsCombinationIsNotValid")
        }
      });
      self.changePasswordSuccessful = ko.observable(false);
      self.changePasswordFormVisible = ko.observable(false);
      ko.validation.group(self);
    }

    AccountProfile.prototype.changePassword = function() {
      var self;
      self = this;
      if (self.isValid()) {
        return $.post("/api/ChangePassword", {
          Username: self.username(),
          OldPassword: self.currentPassword(),
          NewPassword: self.newPassword()
        }).success(function(response) {
          self.changePasswordSuccessful(true);
          self.changePasswordFormVisible(false);
          self.resetField(self.currentPassword);
          self.resetField(self.newPassword);
          return self.resetField(self.confirmPassword);
        }).fail(function(response) {
          var errorMessage, field, responseText;
          responseText = JSON.parse(response.responseText);
          field = responseText.message === 'UsernamePasswordCombinationIsNotValid' ? self.currentPassword : self.newPassword;
          errorMessage = $.i18n.t("app:resetPassword." + responseText.message);
          field.error = errorMessage;
          return field.__valid__(false);
        });
      } else {
        return self.errors.showAllMessages();
      }
    };

    AccountProfile.prototype.showChangePasswordForm = function() {
      this.changePasswordSuccessful(false);
      return this.changePasswordFormVisible(true);
    };

    AccountProfile.prototype.resetField = function(field) {
      field(null);
      return field.__valid__(true);
    };

    return AccountProfile;

  })(FormBase);

}).call(this);
