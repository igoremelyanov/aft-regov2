// Generated by IcedCoffeeScript 108.0.9
(function() {
  var BalanceViewModel, balanceView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BalanceViewModel = (function() {
    var currentAttempt, settings;

    currentAttempt = 0;

    settings = {
      balanceApiUrl: '/api/getbalance',
      balancePlaceholderSelector: '.js-balance-live-view',
      currencyCodePlaceholderSelector: '.js-balance-currency-code',
      currencySymbolPlaceholderSelector: '.js-balance-currency-symbol',
      spinnerHtml: '<i class="fa fa-spinner fa-spin"></i>',
      stubKey: 'app:balanceInformation.balanceNotAvailableStub',
      defaultBalanceType: 'playable',
      balanceTypeDataAttribute: 'balance-type',
      initialDelay: 1000,
      maxAttempts: 10
    };

    function BalanceViewModel() {
      this.isAnyPlaceholderPresent = __bind(this.isAnyPlaceholderPresent, this);
      this.updateBalance = __bind(this.updateBalance, this);
      this.getBalance = __bind(this.getBalance, this);
      this.showStub = __bind(this.showStub, this);
      this.showSpinner = __bind(this.showSpinner, this);
      this.showCurrencySymbol = __bind(this.showCurrencySymbol, this);
      this.showCurrencyCode = __bind(this.showCurrencyCode, this);
      this.showBalance = __bind(this.showBalance, this);
      this.currentBalance = ko.observable({});
      this.shouldShowSpinner = ko.observable(true);
    }

    BalanceViewModel.prototype.showBalance = function() {
      this.shouldShowSpinner(false);
      return $(settings.balancePlaceholderSelector).each((function(_this) {
        return function(index, element) {
          var balanceType, el, _ref;
          el = $(element);
          balanceType = (_ref = el.data(settings.balanceTypeDataAttribute)) != null ? _ref : settings.defaultBalanceType;
          return el.text(_this.currentBalance[balanceType]);
        };
      })(this));
    };

    BalanceViewModel.prototype.showCurrencyCode = function() {
      return $(settings.currencyCodePlaceholderSelector).each((function(_this) {
        return function(index, element) {
          var el;
          el = $(element);
          return el.text(_this.currentBalance.currencyCode);
        };
      })(this));
    };

    BalanceViewModel.prototype.showCurrencySymbol = function() {
      return $(settings.currencySymbolPlaceholderSelector).each((function(_this) {
        return function(index, element) {
          var el;
          el = $(element);
          return el.text(_this.currentBalance.currencySymbol);
        };
      })(this));
    };

    BalanceViewModel.prototype.showSpinner = function() {
      this.shouldShowSpinner(true);
      return $(settings.balancePlaceholderSelector).html(settings.spinnerHtml);
    };

    BalanceViewModel.prototype.showStub = function() {
      this.shouldShowSpinner(false);
      return $(settings.balancePlaceholderSelector).html(i18n.t(settings.stubKey));
    };

    BalanceViewModel.prototype.getBalance = function(successHandler, failHandler) {
      return $.getJson(settings.balanceApiUrl).done((function(_this) {
        return function(response) {
          if (response.success) {
            return successHandler(response.balance);
          } else {
            return failHandler();
          }
        };
      })(this)).fail((function(_this) {
        return function(jqXHR) {
          return failHandler();
        };
      })(this));
    };

    BalanceViewModel.prototype.updateBalance = function() {
      if (this.isAnyPlaceholderPresent()) {
        this.showSpinner();
        return this.getBalance((function(_this) {
          return function(balance) {
            _this.currentBalance = balance;
            _this.showBalance();
            _this.showCurrencyCode();
            return _this.showCurrencySymbol();
          };
        })(this), (function(_this) {
          return function() {
            var delay;
            _this.showSpinner();
            currentAttempt++;
            if (currentAttempt < settings.maxAttempts) {
              delay = settings.initialDelay * currentAttempt;
              return setTimeout(_this.updateBalance, delay);
            } else {
              return _this.showStub();
            }
          };
        })(this));
      }
    };

    BalanceViewModel.prototype.isAnyPlaceholderPresent = function() {
      return $(settings.balancePlaceholderSelector).length > 0;
    };

    return BalanceViewModel;

  })();

  balanceView = new BalanceViewModel();

  balanceView.showSpinner();

  balanceView.updateBalance();

}).call(this);
